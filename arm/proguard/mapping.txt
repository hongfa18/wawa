android.support.v4.app.ActivityCompatHoneycomb -> android.support.v4.app.a:
    void invalidateOptionsMenu(android.app.Activity) -> a
android.support.v4.app.BackStackRecord -> android.support.v4.app.b:
    android.support.v4.app.FragmentManagerImpl mManager -> a
    android.support.v4.app.BackStackRecord$Op mHead -> b
    android.support.v4.app.BackStackRecord$Op mTail -> c
    int mNumOp -> d
    int mEnterAnim -> e
    int mExitAnim -> f
    int mPopEnterAnim -> g
    int mPopExitAnim -> h
    int mTransition -> i
    int mTransitionStyle -> j
    boolean mAddToBackStack -> k
    boolean mAllowAddToBackStack -> l
    java.lang.String mName -> m
    boolean mCommitted -> n
    int mIndex -> o
    int mBreadCrumbTitleRes -> p
    java.lang.CharSequence mBreadCrumbTitleText -> q
    int mBreadCrumbShortTitleRes -> r
    java.lang.CharSequence mBreadCrumbShortTitleText -> s
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    void dump(java.lang.String,java.io.PrintWriter,boolean) -> a
    void addOp(android.support.v4.app.BackStackRecord$Op) -> a
    android.support.v4.app.FragmentTransaction add(int,android.support.v4.app.Fragment,java.lang.String) -> a
    void doAddOp(int,android.support.v4.app.Fragment,java.lang.String,int) -> a
    android.support.v4.app.FragmentTransaction detach(android.support.v4.app.Fragment) -> a
    android.support.v4.app.FragmentTransaction attach(android.support.v4.app.Fragment) -> b
    void bumpBackStackNesting(int) -> a
    int commit() -> a
    int commitInternal(boolean) -> a
    void run() -> run
    void popFromBackStack(boolean) -> b
    java.lang.String getName() -> b
android.support.v4.app.BackStackRecord$Op -> android.support.v4.app.c:
    android.support.v4.app.BackStackRecord$Op next -> a
    android.support.v4.app.BackStackRecord$Op prev -> b
    int cmd -> c
    android.support.v4.app.Fragment fragment -> d
    int enterAnim -> e
    int exitAnim -> f
    int popEnterAnim -> g
    int popExitAnim -> h
    java.util.ArrayList removed -> i
android.support.v4.app.BackStackState -> android.support.v4.app.BackStackState:
    int[] mOps -> a
    int mTransition -> b
    int mTransitionStyle -> c
    java.lang.String mName -> d
    int mIndex -> e
    int mBreadCrumbTitleRes -> f
    java.lang.CharSequence mBreadCrumbTitleText -> g
    int mBreadCrumbShortTitleRes -> h
    java.lang.CharSequence mBreadCrumbShortTitleText -> i
    android.os.Parcelable$Creator CREATOR -> CREATOR
    android.support.v4.app.BackStackRecord instantiate(android.support.v4.app.FragmentManagerImpl) -> a
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.BackStackState$1 -> android.support.v4.app.d:
    android.support.v4.app.BackStackState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.BackStackState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.Fragment -> android.support.v4.app.Fragment:
    android.support.v4.util.SimpleArrayMap sClassMap -> P
    int mState -> a
    android.view.View mAnimatingAway -> b
    int mStateAfterAnimating -> c
    android.os.Bundle mSavedFragmentState -> d
    android.util.SparseArray mSavedViewState -> e
    int mIndex -> f
    java.lang.String mWho -> g
    android.os.Bundle mArguments -> h
    android.support.v4.app.Fragment mTarget -> i
    int mTargetIndex -> j
    int mTargetRequestCode -> k
    boolean mAdded -> l
    boolean mRemoving -> m
    boolean mResumed -> n
    boolean mFromLayout -> o
    boolean mInLayout -> p
    boolean mRestored -> q
    int mBackStackNesting -> r
    android.support.v4.app.FragmentManagerImpl mFragmentManager -> s
    android.support.v4.app.FragmentActivity mActivity -> t
    android.support.v4.app.FragmentManagerImpl mChildFragmentManager -> u
    android.support.v4.app.Fragment mParentFragment -> v
    int mFragmentId -> w
    int mContainerId -> x
    java.lang.String mTag -> y
    boolean mHidden -> z
    boolean mDetached -> A
    boolean mRetainInstance -> B
    boolean mRetaining -> C
    boolean mHasMenu -> D
    boolean mMenuVisible -> E
    boolean mCalled -> F
    int mNextAnim -> G
    android.view.ViewGroup mContainer -> H
    android.view.View mView -> I
    android.view.View mInnerView -> J
    boolean mDeferStart -> K
    boolean mUserVisibleHint -> L
    android.support.v4.app.LoaderManagerImpl mLoaderManager -> M
    boolean mLoadersStarted -> N
    boolean mCheckedForLoaderManager -> O
    android.support.v4.app.Fragment instantiate(android.content.Context,java.lang.String) -> a
    android.support.v4.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle) -> a
    boolean isSupportFragmentClass(android.content.Context,java.lang.String) -> b
    void restoreViewState(android.os.Bundle) -> a
    void setIndex(int,android.support.v4.app.Fragment) -> a
    boolean isInBackStack() -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    android.support.v4.app.FragmentActivity getActivity() -> b
    android.content.res.Resources getResources() -> c
    boolean isDetached() -> d
    void onHiddenChanged(boolean) -> a
    void onActivityResult(int,int,android.content.Intent) -> a
    android.view.LayoutInflater getLayoutInflater(android.os.Bundle) -> b
    void onInflate(android.app.Activity,android.util.AttributeSet,android.os.Bundle) -> a
    void onAttach(android.app.Activity) -> a
    android.view.animation.Animation onCreateAnimation(int,boolean,int) -> a
    void onCreate(android.os.Bundle) -> c
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> a
    void onViewCreated(android.view.View,android.os.Bundle) -> a
    void onActivityCreated(android.os.Bundle) -> d
    void onViewStateRestored(android.os.Bundle) -> e
    void onStart() -> e
    void onResume() -> f
    void onSaveInstanceState(android.os.Bundle) -> f
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onPause() -> g
    void onStop() -> h
    void onLowMemory() -> onLowMemory
    void onDestroyView() -> i
    void onDestroy() -> j
    void initState() -> k
    void onDetach() -> l
    void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> a
    void onPrepareOptionsMenu(android.view.Menu) -> a
    void onDestroyOptionsMenu() -> m
    boolean onOptionsItemSelected(android.view.MenuItem) -> a
    void onOptionsMenuClosed(android.view.Menu) -> b
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    boolean onContextItemSelected(android.view.MenuItem) -> b
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    void instantiateChildFragmentManager() -> n
    void performCreate(android.os.Bundle) -> g
    android.view.View performCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> b
    void performActivityCreated(android.os.Bundle) -> h
    void performStart() -> o
    void performResume() -> p
    void performConfigurationChanged(android.content.res.Configuration) -> a
    void performLowMemory() -> q
    boolean performCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> b
    boolean performPrepareOptionsMenu(android.view.Menu) -> c
    boolean performOptionsItemSelected(android.view.MenuItem) -> c
    boolean performContextItemSelected(android.view.MenuItem) -> d
    void performOptionsMenuClosed(android.view.Menu) -> d
    void performSaveInstanceState(android.os.Bundle) -> i
    void performPause() -> r
    void performStop() -> s
    void performReallyStop() -> t
    void performDestroyView() -> u
    void performDestroy() -> v
android.support.v4.app.Fragment$1 -> android.support.v4.app.e:
    android.support.v4.app.Fragment this$0 -> a
    android.view.View findViewById(int) -> a
android.support.v4.app.Fragment$InstantiationException -> android.support.v4.app.f:
android.support.v4.app.Fragment$SavedState -> android.support.v4.app.Fragment$SavedState:
    android.os.Bundle mState -> a
    android.os.Parcelable$Creator CREATOR -> CREATOR
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.Fragment$SavedState$1 -> android.support.v4.app.g:
    android.support.v4.app.Fragment$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.Fragment$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentActivity -> android.support.v4.app.h:
    android.os.Handler mHandler -> a
    android.support.v4.app.FragmentManagerImpl mFragments -> b
    android.support.v4.app.FragmentContainer mContainer -> c
    boolean mCreated -> d
    boolean mResumed -> e
    boolean mStopped -> f
    boolean mReallyStopped -> g
    boolean mRetaining -> h
    boolean mOptionsMenuInvalidated -> i
    boolean mCheckedForLoaderManager -> j
    boolean mLoadersStarted -> k
    android.support.v4.util.SimpleArrayMap mAllLoaderManagers -> l
    android.support.v4.app.LoaderManagerImpl mLoaderManager -> m
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onBackPressed() -> onBackPressed
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onCreate(android.os.Bundle) -> onCreate
    boolean onCreatePanelMenu(int,android.view.Menu) -> onCreatePanelMenu
    android.view.View onCreateView(java.lang.String,android.content.Context,android.util.AttributeSet) -> onCreateView
    void onDestroy() -> onDestroy
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void onLowMemory() -> onLowMemory
    boolean onMenuItemSelected(int,android.view.MenuItem) -> onMenuItemSelected
    void onPanelClosed(int,android.view.Menu) -> onPanelClosed
    void onPause() -> onPause
    void onNewIntent(android.content.Intent) -> onNewIntent
    void onResume() -> onResume
    void onPostResume() -> onPostResume
    void onResumeFragments() -> a
    boolean onPreparePanel(int,android.view.View,android.view.Menu) -> onPreparePanel
    boolean onPrepareOptionsPanel(android.view.View,android.view.Menu) -> a
    java.lang.Object onRetainNonConfigurationInstance() -> onRetainNonConfigurationInstance
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void onStart() -> onStart
    void onStop() -> onStop
    java.lang.Object onRetainCustomNonConfigurationInstance() -> b
    void supportInvalidateOptionsMenu() -> c
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> dump
    java.lang.String viewToString(android.view.View) -> a
    void dumpViewHierarchy(java.lang.String,java.io.PrintWriter,android.view.View) -> a
    void doReallyStop(boolean) -> a
    void onReallyStop() -> d
    void onAttachFragment(android.support.v4.app.Fragment) -> a
    void startActivityForResult(android.content.Intent,int) -> startActivityForResult
    void invalidateSupportFragment(java.lang.String) -> a
    android.support.v4.app.LoaderManagerImpl getLoaderManager(java.lang.String,boolean,boolean) -> a
android.support.v4.app.FragmentActivity$1 -> android.support.v4.app.i:
    android.support.v4.app.FragmentActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
android.support.v4.app.FragmentActivity$2 -> android.support.v4.app.j:
    android.support.v4.app.FragmentActivity this$0 -> a
    android.view.View findViewById(int) -> a
android.support.v4.app.FragmentActivity$FragmentTag -> android.support.v4.app.k:
    int[] Fragment -> a
android.support.v4.app.FragmentActivity$NonConfigurationInstances -> android.support.v4.app.l:
    java.lang.Object activity -> a
    java.lang.Object custom -> b
    android.support.v4.util.SimpleArrayMap children -> c
    java.util.ArrayList fragments -> d
    android.support.v4.util.SimpleArrayMap loaders -> e
android.support.v4.app.FragmentContainer -> android.support.v4.app.m:
    android.view.View findViewById(int) -> a
android.support.v4.app.FragmentManager -> android.support.v4.app.n:
    android.support.v4.app.FragmentTransaction beginTransaction() -> a
    boolean executePendingTransactions() -> b
    android.support.v4.app.Fragment findFragmentByTag(java.lang.String) -> a
android.support.v4.app.FragmentManager$OnBackStackChangedListener -> android.support.v4.app.o:
    void onBackStackChanged() -> a
android.support.v4.app.FragmentManagerImpl -> android.support.v4.app.p:
    boolean DEBUG -> a
    boolean HONEYCOMB -> b
    java.util.ArrayList mPendingActions -> c
    java.lang.Runnable[] mTmpActions -> d
    boolean mExecutingActions -> e
    java.util.ArrayList mActive -> f
    java.util.ArrayList mAdded -> g
    java.util.ArrayList mAvailIndices -> h
    java.util.ArrayList mBackStack -> i
    java.util.ArrayList mCreatedMenus -> j
    java.util.ArrayList mBackStackIndices -> k
    java.util.ArrayList mAvailBackStackIndices -> l
    java.util.ArrayList mBackStackChangeListeners -> m
    int mCurState -> n
    android.support.v4.app.FragmentActivity mActivity -> o
    android.support.v4.app.FragmentContainer mContainer -> p
    android.support.v4.app.Fragment mParent -> q
    boolean mNeedMenuInvalidate -> r
    boolean mStateSaved -> s
    boolean mDestroyed -> t
    java.lang.String mNoTransactionsBecause -> u
    boolean mHavePendingDeferredStart -> v
    android.os.Bundle mStateBundle -> w
    android.util.SparseArray mStateArray -> x
    java.lang.Runnable mExecCommit -> y
    android.view.animation.Interpolator DECELERATE_QUINT -> z
    android.view.animation.Interpolator DECELERATE_CUBIC -> A
    android.view.animation.Interpolator ACCELERATE_QUINT -> B
    android.view.animation.Interpolator ACCELERATE_CUBIC -> C
    void throwException(java.lang.RuntimeException) -> a
    android.support.v4.app.FragmentTransaction beginTransaction() -> a
    boolean executePendingTransactions() -> b
    boolean popBackStackImmediate() -> c
    void putFragment(android.os.Bundle,java.lang.String,android.support.v4.app.Fragment) -> a
    android.support.v4.app.Fragment getFragment(android.os.Bundle,java.lang.String) -> a
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    android.view.animation.Animation makeOpenCloseAnimation(android.content.Context,float,float,float,float) -> a
    android.view.animation.Animation makeFadeAnimation(android.content.Context,float,float) -> a
    android.view.animation.Animation loadAnimation(android.support.v4.app.Fragment,int,boolean,int) -> a
    void performPendingDeferredStart(android.support.v4.app.Fragment) -> a
    void moveToState(android.support.v4.app.Fragment,int,int,int,boolean) -> a
    void moveToState(android.support.v4.app.Fragment) -> b
    void moveToState(int,boolean) -> a
    void moveToState(int,int,int,boolean) -> a
    void startPendingDeferredFragments() -> d
    void makeActive(android.support.v4.app.Fragment) -> c
    void makeInactive(android.support.v4.app.Fragment) -> d
    void addFragment(android.support.v4.app.Fragment,boolean) -> a
    void removeFragment(android.support.v4.app.Fragment,int,int) -> a
    void hideFragment(android.support.v4.app.Fragment,int,int) -> b
    void showFragment(android.support.v4.app.Fragment,int,int) -> c
    void detachFragment(android.support.v4.app.Fragment,int,int) -> d
    void attachFragment(android.support.v4.app.Fragment,int,int) -> e
    android.support.v4.app.Fragment findFragmentById(int) -> a
    android.support.v4.app.Fragment findFragmentByTag(java.lang.String) -> a
    void checkStateLoss() -> t
    void enqueueAction(java.lang.Runnable,boolean) -> a
    int allocBackStackIndex(android.support.v4.app.BackStackRecord) -> a
    void setBackStackIndex(int,android.support.v4.app.BackStackRecord) -> a
    void freeBackStackIndex(int) -> b
    boolean execPendingActions() -> e
    void reportBackStackChanged() -> f
    void addBackStackState(android.support.v4.app.BackStackRecord) -> b
    boolean popBackStackState(android.os.Handler,java.lang.String,int,int) -> a
    java.util.ArrayList retainNonConfig() -> g
    void saveFragmentViewState(android.support.v4.app.Fragment) -> e
    android.os.Bundle saveFragmentBasicState(android.support.v4.app.Fragment) -> f
    android.os.Parcelable saveAllState() -> h
    void restoreAllState(android.os.Parcelable,java.util.ArrayList) -> a
    void attachActivity(android.support.v4.app.FragmentActivity,android.support.v4.app.FragmentContainer,android.support.v4.app.Fragment) -> a
    void noteStateNotSaved() -> i
    void dispatchCreate() -> j
    void dispatchActivityCreated() -> k
    void dispatchStart() -> l
    void dispatchResume() -> m
    void dispatchPause() -> n
    void dispatchStop() -> o
    void dispatchReallyStop() -> p
    void dispatchDestroyView() -> q
    void dispatchDestroy() -> r
    void dispatchConfigurationChanged(android.content.res.Configuration) -> a
    void dispatchLowMemory() -> s
    boolean dispatchCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> a
    boolean dispatchPrepareOptionsMenu(android.view.Menu) -> a
    boolean dispatchOptionsItemSelected(android.view.MenuItem) -> a
    boolean dispatchContextItemSelected(android.view.MenuItem) -> b
    void dispatchOptionsMenuClosed(android.view.Menu) -> b
    int reverseTransit(int) -> c
    int transitToStyleIndex(int,boolean) -> b
android.support.v4.app.FragmentManagerImpl$1 -> android.support.v4.app.q:
    android.support.v4.app.FragmentManagerImpl this$0 -> a
    void run() -> run
android.support.v4.app.FragmentManagerImpl$5 -> android.support.v4.app.r:
    android.support.v4.app.Fragment val$fragment -> a
    android.support.v4.app.FragmentManagerImpl this$0 -> b
    void onAnimationEnd(android.view.animation.Animation) -> onAnimationEnd
    void onAnimationRepeat(android.view.animation.Animation) -> onAnimationRepeat
    void onAnimationStart(android.view.animation.Animation) -> onAnimationStart
android.support.v4.app.FragmentManagerState -> android.support.v4.app.FragmentManagerState:
    android.support.v4.app.FragmentState[] mActive -> a
    int[] mAdded -> b
    android.support.v4.app.BackStackState[] mBackStack -> c
    android.os.Parcelable$Creator CREATOR -> CREATOR
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.FragmentManagerState$1 -> android.support.v4.app.s:
    android.support.v4.app.FragmentManagerState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.FragmentManagerState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentState -> android.support.v4.app.FragmentState:
    java.lang.String mClassName -> a
    int mIndex -> b
    boolean mFromLayout -> c
    int mFragmentId -> d
    int mContainerId -> e
    java.lang.String mTag -> f
    boolean mRetainInstance -> g
    boolean mDetached -> h
    android.os.Bundle mArguments -> i
    android.os.Bundle mSavedFragmentState -> j
    android.support.v4.app.Fragment mInstance -> k
    android.os.Parcelable$Creator CREATOR -> CREATOR
    android.support.v4.app.Fragment instantiate(android.support.v4.app.FragmentActivity,android.support.v4.app.Fragment) -> a
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.FragmentState$1 -> android.support.v4.app.t:
    android.support.v4.app.FragmentState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.FragmentState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentTabHost -> android.support.v4.app.FragmentTabHost:
    java.util.ArrayList mTabs -> a
    android.content.Context mContext -> b
    android.support.v4.app.FragmentManager mFragmentManager -> c
    int mContainerId -> d
    android.widget.TabHost$OnTabChangeListener mOnTabChangeListener -> e
    android.support.v4.app.FragmentTabHost$TabInfo mLastTab -> f
    boolean mAttached -> g
    void setup() -> setup
    void setOnTabChangedListener(android.widget.TabHost$OnTabChangeListener) -> setOnTabChangedListener
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    void onTabChanged(java.lang.String) -> onTabChanged
    android.support.v4.app.FragmentTransaction doTabChanged(java.lang.String,android.support.v4.app.FragmentTransaction) -> a
android.support.v4.app.FragmentTabHost$1 -> android.support.v4.app.u:
android.support.v4.app.FragmentTabHost$SavedState -> android.support.v4.app.FragmentTabHost$SavedState:
    java.lang.String curTab -> a
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    java.lang.String toString() -> toString
android.support.v4.app.FragmentTabHost$SavedState$1 -> android.support.v4.app.v:
    android.support.v4.app.FragmentTabHost$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.FragmentTabHost$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentTabHost$TabInfo -> android.support.v4.app.w:
    java.lang.String tag -> a
    java.lang.Class clss -> b
    android.os.Bundle args -> c
    android.support.v4.app.Fragment fragment -> d
    android.support.v4.app.Fragment access$102(android.support.v4.app.FragmentTabHost$TabInfo,android.support.v4.app.Fragment) -> a
    android.support.v4.app.Fragment access$100(android.support.v4.app.FragmentTabHost$TabInfo) -> a
    java.lang.String access$200(android.support.v4.app.FragmentTabHost$TabInfo) -> b
    java.lang.Class access$300(android.support.v4.app.FragmentTabHost$TabInfo) -> c
    android.os.Bundle access$400(android.support.v4.app.FragmentTabHost$TabInfo) -> d
android.support.v4.app.FragmentTransaction -> android.support.v4.app.x:
    android.support.v4.app.FragmentTransaction add(int,android.support.v4.app.Fragment,java.lang.String) -> a
    android.support.v4.app.FragmentTransaction detach(android.support.v4.app.Fragment) -> a
    android.support.v4.app.FragmentTransaction attach(android.support.v4.app.Fragment) -> b
    int commit() -> a
android.support.v4.app.LoaderManager -> android.support.v4.app.y:
    boolean hasRunningLoaders() -> a
android.support.v4.app.LoaderManager$LoaderCallbacks -> android.support.v4.app.z:
    android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle) -> a
    void onLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
    void onLoaderReset(android.support.v4.content.Loader) -> a
android.support.v4.app.LoaderManagerImpl -> android.support.v4.app.aa:
    boolean DEBUG -> a
    android.support.v4.util.SparseArrayCompat mLoaders -> b
    android.support.v4.util.SparseArrayCompat mInactiveLoaders -> c
    java.lang.String mWho -> d
    android.support.v4.app.FragmentActivity mActivity -> e
    boolean mStarted -> f
    boolean mRetaining -> g
    void updateActivity(android.support.v4.app.FragmentActivity) -> a
    void doStart() -> b
    void doStop() -> c
    void doRetain() -> d
    void finishRetain() -> e
    void doReportNextStart() -> f
    void doReportStart() -> g
    void doDestroy() -> h
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    boolean hasRunningLoaders() -> a
android.support.v4.app.LoaderManagerImpl$LoaderInfo -> android.support.v4.app.ab:
    int mId -> a
    android.os.Bundle mArgs -> b
    android.support.v4.app.LoaderManager$LoaderCallbacks mCallbacks -> c
    android.support.v4.content.Loader mLoader -> d
    boolean mHaveData -> e
    boolean mDeliveredData -> f
    java.lang.Object mData -> g
    boolean mStarted -> h
    boolean mRetaining -> i
    boolean mRetainingStarted -> j
    boolean mReportNextStart -> k
    boolean mDestroyed -> l
    boolean mListenerRegistered -> m
    android.support.v4.app.LoaderManagerImpl$LoaderInfo mPendingLoader -> n
    android.support.v4.app.LoaderManagerImpl this$0 -> o
    void start() -> a
    void retain() -> b
    void finishRetain() -> c
    void reportStart() -> d
    void stop() -> e
    void destroy() -> f
    void callOnLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
android.support.v4.app.NoSaveStateFrameLayout -> android.support.v4.app.ac:
    android.view.ViewGroup wrap(android.view.View) -> a
    void dispatchSaveInstanceState(android.util.SparseArray) -> dispatchSaveInstanceState
    void dispatchRestoreInstanceState(android.util.SparseArray) -> dispatchRestoreInstanceState
android.support.v4.app.SuperNotCalledException -> android.support.v4.app.ad:
android.support.v4.content.Loader -> android.support.v4.a.a:
    int mId -> a
    android.support.v4.content.Loader$OnLoadCompleteListener mListener -> b
    boolean mStarted -> c
    boolean mAbandoned -> d
    boolean mReset -> e
    boolean mContentChanged -> f
    boolean mProcessingChange -> g
    void registerListener(int,android.support.v4.content.Loader$OnLoadCompleteListener) -> a
    void unregisterListener(android.support.v4.content.Loader$OnLoadCompleteListener) -> a
    void startLoading() -> a
    void onStartLoading() -> b
    void stopLoading() -> c
    void onStopLoading() -> d
    void reset() -> e
    void onReset() -> f
    java.lang.String dataToString(java.lang.Object) -> a
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
android.support.v4.content.Loader$OnLoadCompleteListener -> android.support.v4.a.b:
android.support.v4.os.ParcelableCompat -> android.support.v4.b.a:
    android.os.Parcelable$Creator newCreator(android.support.v4.os.ParcelableCompatCreatorCallbacks) -> a
android.support.v4.os.ParcelableCompat$CompatCreator -> android.support.v4.b.b:
    android.support.v4.os.ParcelableCompatCreatorCallbacks mCallbacks -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
android.support.v4.os.ParcelableCompatCreatorCallbacks -> android.support.v4.b.c:
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> a
    java.lang.Object[] newArray(int) -> a
android.support.v4.os.ParcelableCompatCreatorHoneycombMR2 -> android.support.v4.b.d:
    android.support.v4.os.ParcelableCompatCreatorCallbacks mCallbacks -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
android.support.v4.os.ParcelableCompatCreatorHoneycombMR2Stub -> android.support.v4.b.e:
    android.os.Parcelable$Creator instantiate(android.support.v4.os.ParcelableCompatCreatorCallbacks) -> a
android.support.v4.util.ArrayMap -> android.support.v4.c.a:
    android.support.v4.util.MapCollections mCollections -> a
    android.support.v4.util.MapCollections getCollection() -> b
    void putAll(java.util.Map) -> putAll
    java.util.Set entrySet() -> entrySet
    java.util.Set keySet() -> keySet
    java.util.Collection values() -> values
android.support.v4.util.ArrayMap$1 -> android.support.v4.c.b:
    android.support.v4.util.ArrayMap this$0 -> a
    int colGetSize() -> a
    java.lang.Object colGetEntry(int,int) -> a
    int colIndexOfKey(java.lang.Object) -> a
    int colIndexOfValue(java.lang.Object) -> b
    java.util.Map colGetMap() -> b
    void colPut(java.lang.Object,java.lang.Object) -> a
    java.lang.Object colSetValue(int,java.lang.Object) -> a
    void colRemoveAt(int) -> a
    void colClear() -> c
android.support.v4.util.ContainerHelpers -> android.support.v4.c.c:
    int[] EMPTY_INTS -> a
    long[] EMPTY_LONGS -> b
    java.lang.Object[] EMPTY_OBJECTS -> c
    int idealIntArraySize(int) -> a
    int idealByteArraySize(int) -> b
    boolean equal(java.lang.Object,java.lang.Object) -> a
    int binarySearch(int[],int,int) -> a
android.support.v4.util.DebugUtils -> android.support.v4.c.d:
    void buildShortClassTag(java.lang.Object,java.lang.StringBuilder) -> a
android.support.v4.util.LogWriter -> android.support.v4.c.e:
    java.lang.String mTag -> a
    java.lang.StringBuilder mBuilder -> b
    void close() -> close
    void flush() -> flush
    void write(char[],int,int) -> write
    void flushBuilder() -> a
android.support.v4.util.MapCollections -> android.support.v4.c.f:
    android.support.v4.util.MapCollections$EntrySet mEntrySet -> b
    android.support.v4.util.MapCollections$KeySet mKeySet -> c
    android.support.v4.util.MapCollections$ValuesCollection mValues -> d
    boolean containsAllHelper(java.util.Map,java.util.Collection) -> a
    boolean removeAllHelper(java.util.Map,java.util.Collection) -> b
    boolean retainAllHelper(java.util.Map,java.util.Collection) -> c
    java.lang.Object[] toArrayHelper(int) -> b
    java.lang.Object[] toArrayHelper(java.lang.Object[],int) -> a
    boolean equalsSetHelper(java.util.Set,java.lang.Object) -> a
    java.util.Set getEntrySet() -> d
    java.util.Set getKeySet() -> e
    java.util.Collection getValues() -> f
    int colGetSize() -> a
    java.lang.Object colGetEntry(int,int) -> a
    int colIndexOfKey(java.lang.Object) -> a
    int colIndexOfValue(java.lang.Object) -> b
    java.util.Map colGetMap() -> b
    void colPut(java.lang.Object,java.lang.Object) -> a
    java.lang.Object colSetValue(int,java.lang.Object) -> a
    void colRemoveAt(int) -> a
    void colClear() -> c
android.support.v4.util.MapCollections$ArrayIterator -> android.support.v4.c.g:
    int mOffset -> a
    int mSize -> b
    int mIndex -> c
    boolean mCanRemove -> d
    android.support.v4.util.MapCollections this$0 -> e
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
android.support.v4.util.MapCollections$EntrySet -> android.support.v4.c.h:
    android.support.v4.util.MapCollections this$0 -> a
    boolean add(java.util.Map$Entry) -> a
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    boolean isEmpty() -> isEmpty
    java.util.Iterator iterator() -> iterator
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    int size() -> size
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    boolean add(java.lang.Object) -> add
android.support.v4.util.MapCollections$KeySet -> android.support.v4.c.i:
    android.support.v4.util.MapCollections this$0 -> a
    boolean add(java.lang.Object) -> add
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    boolean isEmpty() -> isEmpty
    java.util.Iterator iterator() -> iterator
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    int size() -> size
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
android.support.v4.util.MapCollections$MapIterator -> android.support.v4.c.j:
    int mEnd -> a
    int mIndex -> b
    boolean mEntryValid -> c
    android.support.v4.util.MapCollections this$0 -> d
    boolean hasNext() -> hasNext
    java.util.Map$Entry next() -> a
    void remove() -> remove
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    java.lang.Object setValue(java.lang.Object) -> setValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Object next() -> next
android.support.v4.util.MapCollections$ValuesCollection -> android.support.v4.c.k:
    android.support.v4.util.MapCollections this$0 -> a
    boolean add(java.lang.Object) -> add
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    boolean isEmpty() -> isEmpty
    java.util.Iterator iterator() -> iterator
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    int size() -> size
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
android.support.v4.util.SimpleArrayMap -> android.support.v4.c.l:
    java.lang.Object[] mBaseCache -> b
    int mBaseCacheSize -> c
    java.lang.Object[] mTwiceBaseCache -> d
    int mTwiceBaseCacheSize -> e
    int[] mHashes -> f
    java.lang.Object[] mArray -> g
    int mSize -> h
    int indexOf(java.lang.Object,int) -> a
    int indexOfNull() -> a
    void allocArrays(int) -> e
    void freeArrays(int[],java.lang.Object[],int) -> a
    void clear() -> clear
    void ensureCapacity(int) -> a
    boolean containsKey(java.lang.Object) -> containsKey
    int indexOfValue(java.lang.Object) -> a
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object keyAt(int) -> b
    java.lang.Object valueAt(int) -> c
    java.lang.Object setValueAt(int,java.lang.Object) -> a
    boolean isEmpty() -> isEmpty
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object removeAt(int) -> d
    int size() -> size
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
android.support.v4.util.SparseArrayCompat -> android.support.v4.c.m:
    java.lang.Object DELETED -> a
    boolean mGarbage -> b
    int[] mKeys -> c
    java.lang.Object[] mValues -> d
    int mSize -> e
    android.support.v4.util.SparseArrayCompat clone() -> a
    void gc() -> d
    int size() -> b
    int keyAt(int) -> a
    java.lang.Object valueAt(int) -> b
    void clear() -> c
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
android.support.v4.view.AccessibilityDelegateCompat -> android.support.v4.view.a:
    android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateImpl IMPL -> b
    java.lang.Object DEFAULT_DELEGATE -> c
    java.lang.Object mBridge -> a
    java.lang.Object getBridge() -> a
android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateIcsImpl -> android.support.v4.view.b:
    java.lang.Object newAccessiblityDelegateDefaultImpl() -> a
android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateImpl -> android.support.v4.view.c:
    java.lang.Object newAccessiblityDelegateDefaultImpl() -> a
android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateJellyBeanImpl -> android.support.v4.view.d:
android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateStubImpl -> android.support.v4.view.e:
    java.lang.Object newAccessiblityDelegateDefaultImpl() -> a
android.support.v4.view.AccessibilityDelegateCompatIcs -> android.support.v4.view.f:
    java.lang.Object newAccessibilityDelegateDefaultImpl() -> a
android.support.v4.view.GravityCompat -> android.support.v4.view.g:
    android.support.v4.view.GravityCompat$GravityCompatImpl IMPL -> a
    int getAbsoluteGravity(int,int) -> a
android.support.v4.view.GravityCompat$GravityCompatImpl -> android.support.v4.view.h:
    int getAbsoluteGravity(int,int) -> a
android.support.v4.view.GravityCompat$GravityCompatImplBase -> android.support.v4.view.i:
    int getAbsoluteGravity(int,int) -> a
android.support.v4.view.GravityCompat$GravityCompatImplJellybeanMr1 -> android.support.v4.view.j:
    int getAbsoluteGravity(int,int) -> a
android.support.v4.view.GravityCompatJellybeanMr1 -> android.support.v4.view.k:
    int getAbsoluteGravity(int,int) -> a
android.support.v4.view.KeyEventCompat -> android.support.v4.view.l:
    android.support.v4.view.KeyEventCompat$KeyEventVersionImpl IMPL -> a
    boolean hasModifiers(android.view.KeyEvent,int) -> a
    boolean hasNoModifiers(android.view.KeyEvent) -> a
    void startTracking(android.view.KeyEvent) -> b
android.support.v4.view.KeyEventCompat$BaseKeyEventVersionImpl -> android.support.v4.view.m:
    int metaStateFilterDirectionalModifiers(int,int,int,int,int) -> a
    int normalizeMetaState(int) -> a
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
    void startTracking(android.view.KeyEvent) -> a
android.support.v4.view.KeyEventCompat$EclairKeyEventVersionImpl -> android.support.v4.view.n:
    void startTracking(android.view.KeyEvent) -> a
android.support.v4.view.KeyEventCompat$HoneycombKeyEventVersionImpl -> android.support.v4.view.o:
    int normalizeMetaState(int) -> a
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
android.support.v4.view.KeyEventCompat$KeyEventVersionImpl -> android.support.v4.view.p:
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
    void startTracking(android.view.KeyEvent) -> a
android.support.v4.view.KeyEventCompatEclair -> android.support.v4.view.q:
    void startTracking(android.view.KeyEvent) -> a
android.support.v4.view.KeyEventCompatHoneycomb -> android.support.v4.view.r:
    int normalizeMetaState(int) -> a
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
android.support.v4.view.MotionEventCompat -> android.support.v4.view.s:
    android.support.v4.view.MotionEventCompat$MotionEventVersionImpl IMPL -> a
    int getActionMasked(android.view.MotionEvent) -> a
    int getActionIndex(android.view.MotionEvent) -> b
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
    int getPointerCount(android.view.MotionEvent) -> c
android.support.v4.view.MotionEventCompat$BaseMotionEventVersionImpl -> android.support.v4.view.t:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
    int getPointerCount(android.view.MotionEvent) -> a
android.support.v4.view.MotionEventCompat$EclairMotionEventVersionImpl -> android.support.v4.view.u:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
    int getPointerCount(android.view.MotionEvent) -> a
android.support.v4.view.MotionEventCompat$MotionEventVersionImpl -> android.support.v4.view.v:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
    int getPointerCount(android.view.MotionEvent) -> a
android.support.v4.view.MotionEventCompatEclair -> android.support.v4.view.w:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
    int getPointerCount(android.view.MotionEvent) -> a
android.support.v4.view.PagerAdapter -> android.support.v4.view.x:
    android.database.DataSetObservable mObservable -> a
    int getCount() -> a
    void startUpdate(android.view.ViewGroup) -> a
    java.lang.Object instantiateItem(android.view.ViewGroup,int) -> a
    void destroyItem(android.view.ViewGroup,int,java.lang.Object) -> a
    void setPrimaryItem(android.view.ViewGroup,int,java.lang.Object) -> b
    void finishUpdate(android.view.ViewGroup) -> b
    void startUpdate(android.view.View) -> a
    java.lang.Object instantiateItem(android.view.View,int) -> a
    void destroyItem(android.view.View,int,java.lang.Object) -> a
    void setPrimaryItem(android.view.View,int,java.lang.Object) -> b
    void finishUpdate(android.view.View) -> b
    boolean isViewFromObject(android.view.View,java.lang.Object) -> a
    android.os.Parcelable saveState() -> b
    void restoreState(android.os.Parcelable,java.lang.ClassLoader) -> a
    int getItemPosition(java.lang.Object) -> a
    void registerDataSetObserver(android.database.DataSetObserver) -> a
    void unregisterDataSetObserver(android.database.DataSetObserver) -> b
    float getPageWidth(int) -> a
android.support.v4.view.VelocityTrackerCompat -> android.support.v4.view.y:
    android.support.v4.view.VelocityTrackerCompat$VelocityTrackerVersionImpl IMPL -> a
    float getXVelocity(android.view.VelocityTracker,int) -> a
    float getYVelocity(android.view.VelocityTracker,int) -> b
android.support.v4.view.VelocityTrackerCompat$BaseVelocityTrackerVersionImpl -> android.support.v4.view.z:
    float getXVelocity(android.view.VelocityTracker,int) -> a
    float getYVelocity(android.view.VelocityTracker,int) -> b
android.support.v4.view.VelocityTrackerCompat$HoneycombVelocityTrackerVersionImpl -> android.support.v4.view.aa:
    float getXVelocity(android.view.VelocityTracker,int) -> a
    float getYVelocity(android.view.VelocityTracker,int) -> b
android.support.v4.view.VelocityTrackerCompat$VelocityTrackerVersionImpl -> android.support.v4.view.ab:
    float getXVelocity(android.view.VelocityTracker,int) -> a
    float getYVelocity(android.view.VelocityTracker,int) -> b
android.support.v4.view.VelocityTrackerCompatHoneycomb -> android.support.v4.view.ac:
    float getXVelocity(android.view.VelocityTracker,int) -> a
    float getYVelocity(android.view.VelocityTracker,int) -> b
android.support.v4.view.ViewCompat -> android.support.v4.view.ad:
    android.support.v4.view.ViewCompat$ViewCompatImpl IMPL -> a
    boolean canScrollHorizontally(android.view.View,int) -> a
    int getOverScrollMode(android.view.View) -> a
    void setAccessibilityDelegate(android.view.View,android.support.v4.view.AccessibilityDelegateCompat) -> a
    void postInvalidateOnAnimation(android.view.View) -> b
    void postInvalidateOnAnimation(android.view.View,int,int,int,int) -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    void setImportantForAccessibility(android.view.View,int) -> b
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
    int getLayerType(android.view.View) -> c
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
    int getLayoutDirection(android.view.View) -> d
    boolean isOpaque(android.view.View) -> e
android.support.v4.view.ViewCompat$BaseViewCompatImpl -> android.support.v4.view.ae:
    java.util.WeakHashMap mViewPropertyAnimatorCompatMap -> a
    boolean canScrollHorizontally(android.view.View,int) -> a
    int getOverScrollMode(android.view.View) -> a
    void setAccessibilityDelegate(android.view.View,android.support.v4.view.AccessibilityDelegateCompat) -> a
    void postInvalidateOnAnimation(android.view.View) -> b
    void postInvalidateOnAnimation(android.view.View,int,int,int,int) -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    long getFrameTime() -> a
    void setImportantForAccessibility(android.view.View,int) -> b
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
    int getLayerType(android.view.View) -> c
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
    int getLayoutDirection(android.view.View) -> d
    boolean isOpaque(android.view.View) -> e
android.support.v4.view.ViewCompat$EclairMr1ViewCompatImpl -> android.support.v4.view.af:
    boolean isOpaque(android.view.View) -> e
android.support.v4.view.ViewCompat$GBViewCompatImpl -> android.support.v4.view.ag:
    int getOverScrollMode(android.view.View) -> a
android.support.v4.view.ViewCompat$HCViewCompatImpl -> android.support.v4.view.ah:
    long getFrameTime() -> a
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
    int getLayerType(android.view.View) -> c
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
android.support.v4.view.ViewCompat$ICSViewCompatImpl -> android.support.v4.view.ai:
    boolean canScrollHorizontally(android.view.View,int) -> a
    void setAccessibilityDelegate(android.view.View,android.support.v4.view.AccessibilityDelegateCompat) -> a
android.support.v4.view.ViewCompat$JBViewCompatImpl -> android.support.v4.view.aj:
    void postInvalidateOnAnimation(android.view.View) -> b
    void postInvalidateOnAnimation(android.view.View,int,int,int,int) -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    void setImportantForAccessibility(android.view.View,int) -> b
android.support.v4.view.ViewCompat$JbMr1ViewCompatImpl -> android.support.v4.view.ak:
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
    int getLayoutDirection(android.view.View) -> d
android.support.v4.view.ViewCompat$KitKatViewCompatImpl -> android.support.v4.view.al:
    void setImportantForAccessibility(android.view.View,int) -> b
android.support.v4.view.ViewCompat$ViewCompatImpl -> android.support.v4.view.am:
    boolean canScrollHorizontally(android.view.View,int) -> a
    int getOverScrollMode(android.view.View) -> a
    void setAccessibilityDelegate(android.view.View,android.support.v4.view.AccessibilityDelegateCompat) -> a
    void postInvalidateOnAnimation(android.view.View) -> b
    void postInvalidateOnAnimation(android.view.View,int,int,int,int) -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    void setImportantForAccessibility(android.view.View,int) -> b
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
    int getLayerType(android.view.View) -> c
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
    int getLayoutDirection(android.view.View) -> d
    boolean isOpaque(android.view.View) -> e
android.support.v4.view.ViewCompatEclairMr1 -> android.support.v4.view.an:
    boolean isOpaque(android.view.View) -> a
android.support.v4.view.ViewCompatGingerbread -> android.support.v4.view.ao:
    int getOverScrollMode(android.view.View) -> a
android.support.v4.view.ViewCompatHC -> android.support.v4.view.ap:
    long getFrameTime() -> a
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
    int getLayerType(android.view.View) -> a
android.support.v4.view.ViewCompatICS -> android.support.v4.view.aq:
    boolean canScrollHorizontally(android.view.View,int) -> a
    void setAccessibilityDelegate(android.view.View,java.lang.Object) -> a
android.support.v4.view.ViewCompatJB -> android.support.v4.view.ar:
    void postInvalidateOnAnimation(android.view.View) -> a
    void postInvalidateOnAnimation(android.view.View,int,int,int,int) -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    void setImportantForAccessibility(android.view.View,int) -> a
android.support.v4.view.ViewCompatJellybeanMr1 -> android.support.v4.view.as:
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
    int getLayoutDirection(android.view.View) -> a
android.support.v4.view.ViewPager -> android.support.v4.view.ViewPager:
    int[] LAYOUT_ATTRS -> a
    int mExpectedAdapterCount -> b
    java.util.Comparator COMPARATOR -> c
    android.view.animation.Interpolator sInterpolator -> d
    java.util.ArrayList mItems -> e
    android.support.v4.view.ViewPager$ItemInfo mTempItem -> f
    android.graphics.Rect mTempRect -> g
    android.support.v4.view.PagerAdapter mAdapter -> h
    int mCurItem -> i
    int mRestoredCurItem -> j
    android.os.Parcelable mRestoredAdapterState -> k
    java.lang.ClassLoader mRestoredClassLoader -> l
    android.widget.Scroller mScroller -> m
    android.support.v4.view.ViewPager$PagerObserver mObserver -> n
    int mPageMargin -> o
    android.graphics.drawable.Drawable mMarginDrawable -> p
    int mTopPageBounds -> q
    int mBottomPageBounds -> r
    float mFirstOffset -> s
    float mLastOffset -> t
    int mChildWidthMeasureSpec -> u
    int mChildHeightMeasureSpec -> v
    boolean mInLayout -> w
    boolean mScrollingCacheEnabled -> x
    boolean mPopulatePending -> y
    int mOffscreenPageLimit -> z
    boolean mIsBeingDragged -> A
    boolean mIsUnableToDrag -> B
    int mDefaultGutterSize -> C
    int mGutterSize -> D
    int mTouchSlop -> E
    float mLastMotionX -> F
    float mLastMotionY -> G
    float mInitialMotionX -> H
    float mInitialMotionY -> I
    int mActivePointerId -> J
    android.view.VelocityTracker mVelocityTracker -> K
    int mMinimumVelocity -> L
    int mMaximumVelocity -> M
    int mFlingDistance -> N
    int mCloseEnough -> O
    boolean mFakeDragging -> P
    android.support.v4.widget.EdgeEffectCompat mLeftEdge -> Q
    android.support.v4.widget.EdgeEffectCompat mRightEdge -> R
    boolean mFirstLayout -> S
    boolean mNeedCalculatePageOffsets -> T
    boolean mCalledSuper -> U
    int mDecorChildCount -> V
    android.support.v4.view.ViewPager$OnPageChangeListener mOnPageChangeListener -> W
    android.support.v4.view.ViewPager$OnPageChangeListener mInternalPageChangeListener -> Z
    android.support.v4.view.ViewPager$OnAdapterChangeListener mAdapterChangeListener -> aa
    android.support.v4.view.ViewPager$PageTransformer mPageTransformer -> ab
    java.lang.reflect.Method mSetChildrenDrawingOrderEnabled -> ac
    int mDrawingOrder -> ad
    java.util.ArrayList mDrawingOrderedChildren -> ae
    android.support.v4.view.ViewPager$ViewPositionComparator sPositionComparator -> af
    java.lang.Runnable mEndScrollRunnable -> ag
    int mScrollState -> ah
    void onDetachedFromWindow() -> onDetachedFromWindow
    void setScrollState(int) -> setScrollState
    void setAdapter(android.support.v4.view.PagerAdapter) -> setAdapter
    void removeNonDecorViews() -> f
    android.support.v4.view.PagerAdapter getAdapter() -> getAdapter
    void setOnAdapterChangeListener(android.support.v4.view.ViewPager$OnAdapterChangeListener) -> setOnAdapterChangeListener
    int getClientWidth() -> getClientWidth
    void setCurrentItem(int) -> setCurrentItem
    void setCurrentItem(int,boolean) -> a
    int getCurrentItem() -> getCurrentItem
    void setCurrentItemInternal(int,boolean,boolean) -> a
    void setCurrentItemInternal(int,boolean,boolean,int) -> a
    void scrollToItem(int,boolean,int,boolean) -> a
    void setOnPageChangeListener(android.support.v4.view.ViewPager$OnPageChangeListener) -> setOnPageChangeListener
    void setChildrenDrawingOrderEnabledCompat(boolean) -> setChildrenDrawingOrderEnabledCompat
    int getChildDrawingOrder(int,int) -> getChildDrawingOrder
    int getOffscreenPageLimit() -> getOffscreenPageLimit
    void setOffscreenPageLimit(int) -> setOffscreenPageLimit
    void setPageMargin(int) -> setPageMargin
    int getPageMargin() -> getPageMargin
    void setPageMarginDrawable(android.graphics.drawable.Drawable) -> setPageMarginDrawable
    void setPageMarginDrawable(int) -> setPageMarginDrawable
    boolean verifyDrawable(android.graphics.drawable.Drawable) -> verifyDrawable
    void drawableStateChanged() -> drawableStateChanged
    float distanceInfluenceForSnapDuration(float) -> a
    void smoothScrollTo(int,int,int) -> a
    android.support.v4.view.ViewPager$ItemInfo addNewItem(int,int) -> a
    void dataSetChanged() -> a
    void populate() -> b
    void populate(int) -> a
    void sortChildDrawingOrder() -> g
    void calculatePageOffsets(android.support.v4.view.ViewPager$ItemInfo,int,android.support.v4.view.ViewPager$ItemInfo) -> a
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    void addView(android.view.View,int,android.view.ViewGroup$LayoutParams) -> addView
    void removeView(android.view.View) -> removeView
    android.support.v4.view.ViewPager$ItemInfo infoForChild(android.view.View) -> a
    android.support.v4.view.ViewPager$ItemInfo infoForAnyChild(android.view.View) -> b
    android.support.v4.view.ViewPager$ItemInfo infoForPosition(int) -> b
    void onAttachedToWindow() -> onAttachedToWindow
    void onMeasure(int,int) -> onMeasure
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void recomputeScrollPosition(int,int,int,int) -> a
    void onLayout(boolean,int,int,int,int) -> onLayout
    void computeScroll() -> computeScroll
    boolean pageScrolled(int) -> d
    void onPageScrolled(int,float,int) -> a
    void completeScroll(boolean) -> a
    boolean isGutterDrag(float,float) -> a
    void enableLayers(boolean) -> b
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void requestParentDisallowInterceptTouchEvent(boolean) -> c
    boolean performDrag(float) -> b
    android.support.v4.view.ViewPager$ItemInfo infoForCurrentScrollPosition() -> h
    int determineTargetPage(int,float,int,int) -> a
    void draw(android.graphics.Canvas) -> draw
    void onDraw(android.graphics.Canvas) -> onDraw
    void onSecondaryPointerUp(android.view.MotionEvent) -> a
    void endDrag() -> i
    void setScrollingCacheEnabled(boolean) -> setScrollingCacheEnabled
    boolean canScrollHorizontally(int) -> canScrollHorizontally
    boolean canScroll(android.view.View,boolean,int,int,int) -> a
    boolean dispatchKeyEvent(android.view.KeyEvent) -> dispatchKeyEvent
    boolean executeKeyEvent(android.view.KeyEvent) -> a
    boolean arrowScroll(int) -> c
    android.graphics.Rect getChildRectInPagerCoordinates(android.graphics.Rect,android.view.View) -> a
    boolean pageLeft() -> c
    boolean pageRight() -> d
    void addFocusables(java.util.ArrayList,int,int) -> addFocusables
    void addTouchables(java.util.ArrayList) -> addTouchables
    boolean onRequestFocusInDescendants(int,android.graphics.Rect) -> onRequestFocusInDescendants
    boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent) -> dispatchPopulateAccessibilityEvent
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    int[] access$400() -> e
android.support.v4.view.ViewPager$1 -> android.support.v4.view.at:
    int compare(android.support.v4.view.ViewPager$ItemInfo,android.support.v4.view.ViewPager$ItemInfo) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
android.support.v4.view.ViewPager$2 -> android.support.v4.view.au:
    float getInterpolation(float) -> getInterpolation
android.support.v4.view.ViewPager$Decor -> android.support.v4.view.av:
android.support.v4.view.ViewPager$ItemInfo -> android.support.v4.view.aw:
    java.lang.Object object -> a
    int position -> b
    boolean scrolling -> c
    float widthFactor -> d
    float offset -> e
android.support.v4.view.ViewPager$LayoutParams -> android.support.v4.view.ax:
    boolean isDecor -> a
    int gravity -> b
    float widthFactor -> c
    boolean needsMeasure -> d
    int position -> e
    int childIndex -> f
android.support.v4.view.ViewPager$OnAdapterChangeListener -> android.support.v4.view.ay:
    void onAdapterChanged(android.support.v4.view.PagerAdapter,android.support.v4.view.PagerAdapter) -> a
android.support.v4.view.ViewPager$OnPageChangeListener -> android.support.v4.view.az:
    void onPageScrolled(int,float,int) -> a
    void onPageSelected(int) -> a
    void onPageScrollStateChanged(int) -> b
android.support.v4.view.ViewPager$PageTransformer -> android.support.v4.view.ba:
    void transformPage(android.view.View,float) -> a
android.support.v4.view.ViewPager$PagerObserver -> android.support.v4.view.bb:
    android.support.v4.view.ViewPager this$0 -> a
    void onChanged() -> onChanged
    void onInvalidated() -> onInvalidated
android.support.v4.view.ViewPager$SavedState -> android.support.v4.view.ViewPager$SavedState:
    int position -> a
    android.os.Parcelable adapterState -> b
    java.lang.ClassLoader loader -> c
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    java.lang.String toString() -> toString
android.support.v4.view.ViewPager$SavedState$1 -> android.support.v4.view.bc:
    android.support.v4.view.ViewPager$SavedState createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> b
    android.support.v4.view.ViewPager$SavedState[] newArray(int) -> b
    java.lang.Object[] newArray(int) -> a
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> a
android.support.v4.view.ViewPager$ViewPositionComparator -> android.support.v4.view.bd:
    int compare(android.view.View,android.view.View) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
android.support.v4.widget.DrawerLayout -> android.support.v4.widget.DrawerLayout:
    int[] LAYOUT_ATTRS -> a
    android.support.v4.widget.DrawerLayout$ChildAccessibilityDelegate mChildAccessibilityDelegate -> b
    int mMinDrawerMargin -> c
    int mScrimColor -> d
    float mScrimOpacity -> e
    android.graphics.Paint mScrimPaint -> f
    android.support.v4.widget.ViewDragHelper mLeftDragger -> g
    android.support.v4.widget.ViewDragHelper mRightDragger -> h
    android.support.v4.widget.DrawerLayout$ViewDragCallback mLeftCallback -> i
    android.support.v4.widget.DrawerLayout$ViewDragCallback mRightCallback -> j
    int mDrawerState -> k
    boolean mInLayout -> l
    boolean mFirstLayout -> m
    int mLockModeLeft -> n
    int mLockModeRight -> o
    boolean mDisallowInterceptRequested -> p
    boolean mChildrenCanceledTouch -> q
    android.support.v4.widget.DrawerLayout$DrawerListener mListener -> r
    float mInitialMotionX -> s
    float mInitialMotionY -> t
    android.graphics.drawable.Drawable mShadowLeft -> u
    android.graphics.drawable.Drawable mShadowRight -> v
    void setScrimColor(int) -> setScrimColor
    void setDrawerListener(android.support.v4.widget.DrawerLayout$DrawerListener) -> setDrawerListener
    void setDrawerLockMode(int) -> setDrawerLockMode
    void setDrawerLockMode(int,int) -> a
    int getDrawerLockMode(android.view.View) -> a
    void updateDrawerState(int,int,android.view.View) -> a
    void dispatchOnDrawerClosed(android.view.View) -> b
    void dispatchOnDrawerOpened(android.view.View) -> c
    void dispatchOnDrawerSlide(android.view.View,float) -> a
    void setDrawerViewOffset(android.view.View,float) -> b
    float getDrawerViewOffset(android.view.View) -> d
    int getDrawerViewAbsoluteGravity(android.view.View) -> e
    boolean checkDrawerViewAbsoluteGravity(android.view.View,int) -> a
    android.view.View findOpenDrawer() -> a
    android.view.View findDrawerWithGravity(int) -> a
    java.lang.String gravityToString(int) -> b
    void onDetachedFromWindow() -> onDetachedFromWindow
    void onAttachedToWindow() -> onAttachedToWindow
    void onMeasure(int,int) -> onMeasure
    void onLayout(boolean,int,int,int,int) -> onLayout
    void requestLayout() -> requestLayout
    void computeScroll() -> computeScroll
    boolean hasOpaqueBackground(android.view.View) -> k
    boolean drawChild(android.graphics.Canvas,android.view.View,long) -> drawChild
    boolean isContentView(android.view.View) -> f
    boolean isDrawerView(android.view.View) -> g
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void requestDisallowInterceptTouchEvent(boolean) -> requestDisallowInterceptTouchEvent
    void closeDrawers() -> b
    void closeDrawers(boolean) -> a
    void openDrawer(android.view.View) -> h
    void closeDrawer(android.view.View) -> i
    boolean isDrawerVisible(android.view.View) -> j
    boolean hasPeekingDrawer() -> d
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    boolean hasVisibleDrawer() -> e
    android.view.View findVisibleDrawer() -> f
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    boolean onKeyUp(int,android.view.KeyEvent) -> onKeyUp
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void addView(android.view.View,int,android.view.ViewGroup$LayoutParams) -> addView
    int[] access$100() -> c
android.support.v4.widget.DrawerLayout$ChildAccessibilityDelegate -> android.support.v4.widget.a:
android.support.v4.widget.DrawerLayout$DrawerListener -> android.support.v4.widget.b:
    void onDrawerSlide(android.view.View,float) -> a
    void onDrawerOpened(android.view.View) -> a
    void onDrawerClosed(android.view.View) -> b
    void onDrawerStateChanged(int) -> a
android.support.v4.widget.DrawerLayout$LayoutParams -> android.support.v4.widget.c:
    int gravity -> a
    float onScreen -> b
    boolean isPeeking -> c
    boolean knownOpen -> d
android.support.v4.widget.DrawerLayout$SavedState -> android.support.v4.widget.DrawerLayout$SavedState:
    int openDrawerGravity -> a
    int lockModeLeft -> b
    int lockModeRight -> c
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.widget.DrawerLayout$SavedState$1 -> android.support.v4.widget.d:
    android.support.v4.widget.DrawerLayout$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v4.widget.DrawerLayout$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.widget.DrawerLayout$ViewDragCallback -> android.support.v4.widget.e:
    int mAbsGravity -> b
    android.support.v4.widget.ViewDragHelper mDragger -> c
    java.lang.Runnable mPeekRunnable -> d
    android.support.v4.widget.DrawerLayout this$0 -> a
    void removeCallbacks() -> a
    boolean tryCaptureView(android.view.View,int) -> a
    void onViewDragStateChanged(int) -> a
    void onViewPositionChanged(android.view.View,int,int,int,int) -> a
    void onViewCaptured(android.view.View,int) -> b
    void closeOtherDrawer() -> b
    void onViewReleased(android.view.View,float,float) -> a
    void onEdgeTouched(int,int) -> a
    boolean onEdgeLock(int) -> b
    void onEdgeDragStarted(int,int) -> b
    int getViewHorizontalDragRange(android.view.View) -> a
    int clampViewPositionHorizontal(android.view.View,int,int) -> a
    int clampViewPositionVertical(android.view.View,int,int) -> b
android.support.v4.widget.EdgeEffectCompat -> android.support.v4.widget.f:
    java.lang.Object mEdgeEffect -> a
    android.support.v4.widget.EdgeEffectCompat$EdgeEffectImpl IMPL -> b
    void setSize(int,int) -> a
    boolean isFinished() -> a
    void finish() -> b
    boolean onPull(float) -> a
    boolean onRelease() -> c
    boolean draw(android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$BaseEdgeEffectImpl -> android.support.v4.widget.g:
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$EdgeEffectIcsImpl -> android.support.v4.widget.h:
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$EdgeEffectImpl -> android.support.v4.widget.i:
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompatIcs -> android.support.v4.widget.j:
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.ScrollerCompat -> android.support.v4.widget.k:
    java.lang.Object mScroller -> a
    android.support.v4.widget.ScrollerCompat$ScrollerCompatImpl mImpl -> b
    boolean isFinished() -> a
    int getCurrX() -> b
    int getCurrY() -> c
    int getFinalX() -> d
    int getFinalY() -> e
    boolean computeScrollOffset() -> f
    void startScroll(int,int,int,int,int) -> a
    void abortAnimation() -> g
android.support.v4.widget.ScrollerCompat$ScrollerCompatImpl -> android.support.v4.widget.l:
    boolean isFinished(java.lang.Object) -> a
    int getCurrX(java.lang.Object) -> b
    int getCurrY(java.lang.Object) -> c
    boolean computeScrollOffset(java.lang.Object) -> d
    void startScroll(java.lang.Object,int,int,int,int,int) -> a
    void abortAnimation(java.lang.Object) -> e
    int getFinalX(java.lang.Object) -> f
    int getFinalY(java.lang.Object) -> g
android.support.v4.widget.SlidingPaneLayout -> android.support.v4.widget.SlidingPaneLayout:
    int mSliderFadeColor -> b
    int mCoveredFadeColor -> c
    android.graphics.drawable.Drawable mShadowDrawableLeft -> d
    android.graphics.drawable.Drawable mShadowDrawableRight -> e
    int mOverhangSize -> f
    boolean mCanSlide -> g
    android.view.View mSlideableView -> h
    float mSlideOffset -> i
    float mParallaxOffset -> j
    int mSlideRange -> k
    boolean mIsUnableToDrag -> l
    int mParallaxBy -> m
    float mInitialMotionX -> n
    float mInitialMotionY -> o
    android.support.v4.widget.SlidingPaneLayout$PanelSlideListener mPanelSlideListener -> p
    android.support.v4.widget.ViewDragHelper mDragHelper -> q
    boolean mPreservedOpenState -> r
    boolean mFirstLayout -> s
    android.graphics.Rect mTmpRect -> t
    java.util.ArrayList mPostedRunnables -> u
    android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImpl IMPL -> a
    void setParallaxDistance(int) -> setParallaxDistance
    int getParallaxDistance() -> getParallaxDistance
    void setSliderFadeColor(int) -> setSliderFadeColor
    int getSliderFadeColor() -> getSliderFadeColor
    void setCoveredFadeColor(int) -> setCoveredFadeColor
    int getCoveredFadeColor() -> getCoveredFadeColor
    void setPanelSlideListener(android.support.v4.widget.SlidingPaneLayout$PanelSlideListener) -> setPanelSlideListener
    void updateObscuredViewsVisibility(android.view.View) -> a
    void setAllChildrenVisible() -> a
    boolean viewIsOpaque(android.view.View) -> c
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    void onMeasure(int,int) -> onMeasure
    void onLayout(boolean,int,int,int,int) -> onLayout
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void requestChildFocus(android.view.View,android.view.View) -> requestChildFocus
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean closePane(android.view.View,int) -> a
    boolean openPane(android.view.View,int) -> b
    boolean openPane() -> b
    boolean closePane() -> c
    boolean isOpen() -> d
    boolean isSlideable() -> e
    void dimChildView(android.view.View,float,int) -> a
    boolean drawChild(android.graphics.Canvas,android.view.View,long) -> drawChild
    void invalidateChildRegion(android.view.View) -> d
    boolean smoothSlideTo(float,int) -> a
    void computeScroll() -> computeScroll
    void setShadowDrawable(android.graphics.drawable.Drawable) -> setShadowDrawable
    void setShadowDrawableLeft(android.graphics.drawable.Drawable) -> setShadowDrawableLeft
    void setShadowDrawableRight(android.graphics.drawable.Drawable) -> setShadowDrawableRight
    void setShadowResource(int) -> setShadowResource
    void setShadowResourceLeft(int) -> setShadowResourceLeft
    void setShadowResourceRight(int) -> setShadowResourceRight
    void draw(android.graphics.Canvas) -> draw
    void parallaxOtherViews(float) -> a
    boolean isDimmed(android.view.View) -> b
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    boolean isLayoutRtlSupport() -> f
    void access$1000(android.support.v4.widget.SlidingPaneLayout,android.view.View) -> a
    java.util.ArrayList access$1100(android.support.v4.widget.SlidingPaneLayout) -> a
android.support.v4.widget.SlidingPaneLayout$1 -> android.support.v4.widget.m:
android.support.v4.widget.SlidingPaneLayout$DisableLayerRunnable -> android.support.v4.widget.n:
    android.view.View mChildView -> a
    android.support.v4.widget.SlidingPaneLayout this$0 -> b
    void run() -> run
android.support.v4.widget.SlidingPaneLayout$LayoutParams -> android.support.v4.widget.o:
    int[] ATTRS -> e
    float weight -> a
    boolean slideable -> b
    boolean dimWhenOffset -> c
    android.graphics.Paint dimPaint -> d
android.support.v4.widget.SlidingPaneLayout$PanelSlideListener -> android.support.v4.widget.p:
android.support.v4.widget.SlidingPaneLayout$SavedState -> android.support.v4.widget.SlidingPaneLayout$SavedState:
    boolean isOpen -> a
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.widget.SlidingPaneLayout$SavedState$1 -> android.support.v4.widget.q:
    android.support.v4.widget.SlidingPaneLayout$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v4.widget.SlidingPaneLayout$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImpl -> android.support.v4.widget.r:
    void invalidateChildRegion(android.support.v4.widget.SlidingPaneLayout,android.view.View) -> a
android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImplBase -> android.support.v4.widget.s:
    void invalidateChildRegion(android.support.v4.widget.SlidingPaneLayout,android.view.View) -> a
android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImplJB -> android.support.v4.widget.t:
    java.lang.reflect.Method mGetDisplayList -> a
    java.lang.reflect.Field mRecreateDisplayList -> b
    void invalidateChildRegion(android.support.v4.widget.SlidingPaneLayout,android.view.View) -> a
android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImplJBMR1 -> android.support.v4.widget.u:
    void invalidateChildRegion(android.support.v4.widget.SlidingPaneLayout,android.view.View) -> a
android.support.v4.widget.ViewDragHelper -> android.support.v4.widget.v:
    int mDragState -> a
    int mTouchSlop -> b
    int mActivePointerId -> c
    float[] mInitialMotionX -> d
    float[] mInitialMotionY -> e
    float[] mLastMotionX -> f
    float[] mLastMotionY -> g
    int[] mInitialEdgesTouched -> h
    int[] mEdgeDragsInProgress -> i
    int[] mEdgeDragsLocked -> j
    int mPointersDown -> k
    android.view.VelocityTracker mVelocityTracker -> l
    float mMaxVelocity -> m
    float mMinVelocity -> n
    int mEdgeSize -> o
    int mTrackingEdges -> p
    android.support.v4.widget.ScrollerCompat mScroller -> q
    android.support.v4.widget.ViewDragHelper$Callback mCallback -> r
    android.view.View mCapturedView -> s
    boolean mReleaseInProgress -> t
    android.view.ViewGroup mParentView -> u
    android.view.animation.Interpolator sInterpolator -> v
    java.lang.Runnable mSetIdleRunnable -> w
    int getViewDragState() -> a
    void setEdgeTrackingEnabled(int) -> a
    int getEdgeSize() -> b
    void captureChildView(android.view.View,int) -> a
    android.view.View getCapturedView() -> c
    int getTouchSlop() -> d
    void cancel() -> e
    void abort() -> f
    boolean smoothSlideViewTo(android.view.View,int,int) -> a
    boolean settleCapturedViewAt(int,int) -> a
    boolean forceSettleCapturedViewAt(int,int,int,int) -> a
    int computeSettleDuration(android.view.View,int,int,int,int) -> a
    int computeAxisDuration(int,int,int) -> a
    int clampMag(int,int,int) -> b
    float clampMag(float,float,float) -> a
    float distanceInfluenceForSnapDuration(float) -> a
    boolean continueSettling(boolean) -> a
    void dispatchViewReleased(float,float) -> a
    void clearMotionHistory() -> g
    void clearMotionHistory(int) -> e
    void ensureMotionHistorySizeForId(int) -> f
    void saveInitialMotion(float,float,int) -> a
    void saveLastMotion(android.view.MotionEvent) -> c
    boolean isPointerDown(int) -> b
    void setDragState(int) -> c
    boolean tryCaptureViewForDrag(android.view.View,int) -> b
    boolean shouldInterceptTouchEvent(android.view.MotionEvent) -> a
    void processTouchEvent(android.view.MotionEvent) -> b
    void reportNewEdgeDrags(float,float,int) -> b
    boolean checkNewEdgeDrag(float,float,int,int) -> a
    boolean checkTouchSlop(android.view.View,float,float) -> a
    boolean checkTouchSlop(int) -> d
    boolean checkTouchSlop(int,int) -> b
    void releaseViewForPointerUp() -> h
    void dragTo(int,int,int,int) -> b
    boolean isCapturedViewUnder(int,int) -> c
    boolean isViewUnder(android.view.View,int,int) -> b
    android.view.View findTopChildUnder(int,int) -> d
    int getEdgesTouched(int,int) -> e
android.support.v4.widget.ViewDragHelper$1 -> android.support.v4.widget.w:
    float getInterpolation(float) -> getInterpolation
android.support.v4.widget.ViewDragHelper$Callback -> android.support.v4.widget.x:
    void onViewDragStateChanged(int) -> a
    void onViewPositionChanged(android.view.View,int,int,int,int) -> a
    void onViewCaptured(android.view.View,int) -> b
    void onViewReleased(android.view.View,float,float) -> a
    void onEdgeTouched(int,int) -> a
    boolean onEdgeLock(int) -> b
    void onEdgeDragStarted(int,int) -> b
    int getOrderedChildIndex(int) -> c
    int getViewHorizontalDragRange(android.view.View) -> a
    int getViewVerticalDragRange(android.view.View) -> b
    boolean tryCaptureView(android.view.View,int) -> a
    int clampViewPositionHorizontal(android.view.View,int,int) -> a
    int clampViewPositionVertical(android.view.View,int,int) -> b
com.github.mikephil.charting.charts.BarChart -> com.a.a.a.a.a:
    float mSkew -> ap
    float mDepth -> aq
    boolean m3DEnabled -> ar
    boolean mDrawHighlightArrow -> as
    boolean mDrawValueAboveBar -> at
    boolean mDrawValuesForWholeStack -> au
    boolean mDrawBarShadow -> a
    android.graphics.RectF mBarShadow -> b
    android.graphics.RectF mBarRect -> c
    void init() -> a
    void calcMinMax(boolean) -> a
    void drawHighlights() -> b
    void drawData() -> c
    void prepareBar(float,float,float) -> a
    void drawXLabels(float) -> a
    void drawVerticalGrid() -> d
    void drawValues() -> e
    float getPositiveYOffset(boolean) -> b
    float getNegativeYOffset(boolean) -> c
    void drawValue(float,float,float) -> b
    com.github.mikephil.charting.utils.Highlight getHighlightByTouchPoint(float,float) -> a
    void setSkew(float) -> setSkew
    float getSkew() -> getSkew
    void setDepth(float) -> setDepth
    float getDepth() -> getDepth
    void set3DEnabled(boolean) -> set3DEnabled
    void setDrawHighlightArrow(boolean) -> setDrawHighlightArrow
    void setDrawValueAboveBar(boolean) -> setDrawValueAboveBar
    void setDrawValuesForWholeStack(boolean) -> setDrawValuesForWholeStack
    void setDrawBarShadow(boolean) -> setDrawBarShadow
    void drawAdditional() -> f
com.github.mikephil.charting.charts.BarLineChartBase -> com.a.a.a.a.b:
    int mMaxVisibleCount -> d
    float mGridWidth -> e
    boolean mPinchZoomEnabled -> f
    boolean mDoubleTapToZoomEnabled -> g
    boolean mDragEnabled -> a
    boolean mScaleEnabled -> b
    boolean mFixedYValues -> h
    boolean mStartAtZero -> i
    boolean mFilterData -> j
    android.graphics.Paint mGridPaint -> k
    android.graphics.Paint mGridBackgroundPaint -> l
    android.graphics.Paint mBorderPaint -> m
    boolean mHighLightIndicatorEnabled -> n
    boolean mDrawVerticalGrid -> o
    boolean mDrawHorizontalGrid -> p
    boolean mDrawYLabels -> q
    boolean mDrawXLabels -> r
    boolean mDrawBorder -> s
    boolean mDrawGridBackground -> t
    com.github.mikephil.charting.interfaces.OnDrawListener mDrawListener -> u
    com.github.mikephil.charting.utils.YLabels mYLabels -> v
    com.github.mikephil.charting.utils.XLabels mXLabels -> w
    com.github.mikephil.charting.charts.BarLineChartBase$BorderPosition[] mBorderPositions -> c
    android.view.View$OnTouchListener mListener -> x
    int[] $SWITCH_TABLE$com$github$mikephil$charting$charts$BarLineChartBase$BorderPosition -> ap
    void init() -> a
    void onDraw(android.graphics.Canvas) -> onDraw
    void prepare() -> g
    void prepareMatrix() -> I
    void notifyDataSetChanged() -> h
    void calculateOffsets() -> i
    void calcModulus() -> j
    void calcMinMax(boolean) -> a
    void prepareXLabels() -> k
    void prepareYLabels() -> l
    void drawXLabels() -> J
    void drawXLabels(float) -> a
    void drawYLabels() -> K
    void drawYLabels(float,float[],float) -> a
    void drawBorder() -> m
    void drawGridBackground() -> n
    void drawHorizontalGrid() -> o
    void drawVerticalGrid() -> d
    void drawLimitLines() -> L
    boolean isOffContentRight(float) -> b
    boolean isOffContentLeft(float) -> c
    boolean isOffContentTop(float) -> d
    boolean isOffContentBottom(float) -> e
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void zoom(float,float,float,float) -> a
    void fitScreen() -> p
    void setInvertYAxisEnabled(boolean) -> setInvertYAxisEnabled
    boolean isInvertYAxisEnabled() -> q
    void setOnTouchListener(android.view.View$OnTouchListener) -> setOnTouchListener
    void setOnDrawListener(com.github.mikephil.charting.interfaces.OnDrawListener) -> setOnDrawListener
    com.github.mikephil.charting.interfaces.OnDrawListener getDrawListener() -> getDrawListener
    android.graphics.PointF getPosition(com.github.mikephil.charting.data.Entry) -> a
    void setGridColor(int) -> setGridColor
    void setMaxVisibleValueCount(int) -> setMaxVisibleValueCount
    void setHighlightIndicatorEnabled(boolean) -> setHighlightIndicatorEnabled
    void setStartAtZero(boolean) -> setStartAtZero
    void setGridWidth(float) -> setGridWidth
    void setDragEnabled(boolean) -> setDragEnabled
    boolean isDragEnabled() -> r
    void setScaleEnabled(boolean) -> setScaleEnabled
    boolean isScaleEnabled() -> s
    void setDoubleTapToZoomEnabled(boolean) -> setDoubleTapToZoomEnabled
    boolean isDoubleTapToZoomEnabled() -> t
    void setDrawVerticalGrid(boolean) -> setDrawVerticalGrid
    void setDrawHorizontalGrid(boolean) -> setDrawHorizontalGrid
    void setDrawBorder(boolean) -> setDrawBorder
    void setDrawGridBackground(boolean) -> setDrawGridBackground
    void setDrawXLabels(boolean) -> setDrawXLabels
    void setDrawYLabels(boolean) -> setDrawYLabels
    void setBorderPositions(com.github.mikephil.charting.charts.BarLineChartBase$BorderPosition[]) -> setBorderPositions
    com.github.mikephil.charting.charts.BarLineChartBase$BorderPosition[] getBorderPositions() -> getBorderPositions
    void setBorderWidth(int) -> setBorderWidth
    void setBorderColor(int) -> setBorderColor
    com.github.mikephil.charting.utils.Highlight getHighlightByTouchPoint(float,float) -> a
    com.github.mikephil.charting.utils.PointD getValuesByTouchPoint(float,float) -> b
    float getScaleX() -> getScaleX
    float getScaleY() -> getScaleY
    boolean isFullyZoomedOut() -> u
    com.github.mikephil.charting.utils.YLabels getYLabels() -> getYLabels
    com.github.mikephil.charting.utils.XLabels getXLabels() -> getXLabels
    void setPinchZoom(boolean) -> setPinchZoom
    boolean isPinchZoomEnabled() -> v
    void setDragOffsetX(float) -> setDragOffsetX
    void setDragOffsetY(float) -> setDragOffsetY
    boolean hasNoDragOffset() -> w
    com.github.mikephil.charting.data.BarLineScatterCandleData getFilteredData() -> getFilteredData
    int[] $SWITCH_TABLE$com$github$mikephil$charting$charts$BarLineChartBase$BorderPosition() -> x
com.github.mikephil.charting.charts.BarLineChartBase$BorderPosition -> com.a.a.a.a.c:
    com.github.mikephil.charting.charts.BarLineChartBase$BorderPosition LEFT -> a
    com.github.mikephil.charting.charts.BarLineChartBase$BorderPosition RIGHT -> b
    com.github.mikephil.charting.charts.BarLineChartBase$BorderPosition TOP -> c
    com.github.mikephil.charting.charts.BarLineChartBase$BorderPosition BOTTOM -> d
    com.github.mikephil.charting.charts.BarLineChartBase$BorderPosition[] ENUM$VALUES -> e
    com.github.mikephil.charting.charts.BarLineChartBase$BorderPosition[] values() -> values
    com.github.mikephil.charting.charts.BarLineChartBase$BorderPosition valueOf(java.lang.String) -> valueOf
com.github.mikephil.charting.charts.CandleStickChart -> com.a.a.a.a.d:
    void calcMinMax(boolean) -> a
    void drawData() -> c
    void transformBody(float[],com.github.mikephil.charting.data.CandleEntry,float) -> a
    void transformShadow(float[],com.github.mikephil.charting.data.CandleEntry) -> a
    void drawValues() -> e
    void drawAdditional() -> f
    void drawHighlights() -> b
com.github.mikephil.charting.charts.Chart -> com.a.a.a.a.e:
    boolean mLogEnabled -> y
    java.lang.String mUnit -> z
    com.github.mikephil.charting.utils.ValueFormatter mValueFormatter -> A
    boolean mUseDefaultFormatter -> a
    float mOffsetLeft -> B
    float mOffsetTop -> C
    float mOffsetRight -> D
    float mOffsetBottom -> E
    com.github.mikephil.charting.data.ChartData mData -> F
    android.graphics.Canvas mDrawCanvas -> G
    float mYChartMin -> H
    float mYChartMax -> I
    android.graphics.Paint mXLabelPaint -> J
    android.graphics.Paint mYLabelPaint -> K
    android.graphics.Paint mHighlightPaint -> L
    android.graphics.Paint mDescPaint -> M
    android.graphics.Paint mInfoPaint -> N
    android.graphics.Paint mValuePaint -> O
    android.graphics.Paint mRenderPaint -> P
    android.graphics.Paint mLegendLabelPaint -> Q
    android.graphics.Paint mLegendFormPaint -> R
    android.graphics.Paint mLimitLinePaint -> S
    java.lang.String mDescription -> T
    boolean mDataNotSet -> U
    boolean mDrawUnitInChart -> V
    float mDeltaY -> W
    float mDeltaX -> Z
    boolean mTouchEnabled -> aa
    boolean mDrawYValues -> ab
    boolean mHighlightEnabled -> ac
    boolean mDrawLegend -> ad
    android.graphics.RectF mContentRect -> ae
    com.github.mikephil.charting.utils.Legend mLegend -> af
    com.github.mikephil.charting.renderer.Transformer mTrans -> ag
    com.github.mikephil.charting.interfaces.OnChartValueSelectedListener mSelectionListener -> ah
    java.lang.String mNoDataText -> b
    com.github.mikephil.charting.interfaces.OnChartGestureListener mGestureListener -> c
    java.lang.String mNoDataTextDescription -> d
    boolean mOffsetsCalculated -> e
    android.graphics.Bitmap mDrawBitmap -> ai
    android.graphics.Paint mDrawPaint -> aj
    com.github.mikephil.charting.utils.Highlight[] mIndicesToHightlight -> ak
    boolean mDrawMarkerViews -> al
    com.github.mikephil.charting.utils.MarkerView mMarkerView -> am
    float mPhaseY -> an
    float mPhaseX -> ao
    int[] $SWITCH_TABLE$com$github$mikephil$charting$utils$Legend$LegendPosition -> f
    void init() -> a
    void setData(com.github.mikephil.charting.data.ChartData) -> setData
    void prepare() -> g
    void calculateOffsets() -> i
    void calcMinMax(boolean) -> a
    void calcFormats() -> y
    void onDraw(android.graphics.Canvas) -> onDraw
    void prepareContentRect() -> z
    void prepareLegend() -> A
    void drawLegend() -> B
    void drawDescription() -> C
    void drawValues() -> e
    void drawData() -> c
    void drawAdditional() -> f
    void drawHighlights() -> b
    boolean valuesToHighlight() -> D
    void highlightValues(com.github.mikephil.charting.utils.Highlight[]) -> a
    void highlightTouch(com.github.mikephil.charting.utils.Highlight) -> a
    void drawMarkers() -> E
    float[] getMarkerPosition(com.github.mikephil.charting.data.Entry,int) -> a
    float getPhaseY() -> getPhaseY
    void setPhaseY(float) -> setPhaseY
    float getPhaseX() -> getPhaseX
    void setPhaseX(float) -> setPhaseX
    android.graphics.Canvas getCanvas() -> getCanvas
    void setOnChartValueSelectedListener(com.github.mikephil.charting.interfaces.OnChartValueSelectedListener) -> setOnChartValueSelectedListener
    void setOnChartGestureListener(com.github.mikephil.charting.interfaces.OnChartGestureListener) -> setOnChartGestureListener
    com.github.mikephil.charting.interfaces.OnChartGestureListener getOnChartGestureListener() -> getOnChartGestureListener
    void setHighlightEnabled(boolean) -> setHighlightEnabled
    float getYValueSum() -> getYValueSum
    float getYMax() -> getYMax
    float getYChartMin() -> getYChartMin
    float getYChartMax() -> getYChartMax
    float getYMin() -> getYMin
    float getDeltaX() -> getDeltaX
    float getDeltaY() -> getDeltaY
    float getAverage() -> getAverage
    int getValueCount() -> getValueCount
    android.graphics.PointF getCenter() -> getCenter
    android.graphics.PointF getCenterOffsets() -> getCenterOffsets
    void setDescriptionTextSize(float) -> setDescriptionTextSize
    void setLogEnabled(boolean) -> setLogEnabled
    void setDescription(java.lang.String) -> setDescription
    void setNoDataText(java.lang.String) -> setNoDataText
    void setNoDataTextDescription(java.lang.String) -> setNoDataTextDescription
    float getOffsetLeft() -> getOffsetLeft
    float getOffsetBottom() -> getOffsetBottom
    float getOffsetRight() -> getOffsetRight
    float getOffsetTop() -> getOffsetTop
    void setTouchEnabled(boolean) -> setTouchEnabled
    void setDrawYValues(boolean) -> setDrawYValues
    void setMarkerView(com.github.mikephil.charting.utils.MarkerView) -> setMarkerView
    com.github.mikephil.charting.utils.MarkerView getMarkerView() -> getMarkerView
    void setDrawUnitsInChart(boolean) -> setDrawUnitsInChart
    void setUnit(java.lang.String) -> setUnit
    java.lang.String getUnit() -> getUnit
    void setDrawLegend(boolean) -> setDrawLegend
    com.github.mikephil.charting.utils.Legend getLegend() -> getLegend
    android.graphics.RectF getContentRect() -> getContentRect
    com.github.mikephil.charting.renderer.Transformer getTransformer() -> getTransformer
    void disableScroll() -> F
    void enableScroll() -> G
    void setDrawMarkerViews(boolean) -> setDrawMarkerViews
    void setValueFormatter(com.github.mikephil.charting.utils.ValueFormatter) -> setValueFormatter
    com.github.mikephil.charting.utils.ValueFormatter getValueFormatter() -> getValueFormatter
    void setValueTextColor(int) -> setValueTextColor
    void setValueTextSize(float) -> setValueTextSize
    com.github.mikephil.charting.data.Entry getEntryByDataSetIndex(int,int) -> a
    java.util.ArrayList getYValsAtIndex(int) -> a
    com.github.mikephil.charting.data.ChartData getData() -> getData
    void setValueTypeface(android.graphics.Typeface) -> setValueTypeface
    void setDescriptionTypeface(android.graphics.Typeface) -> setDescriptionTypeface
    android.graphics.Bitmap getChartBitmap() -> getChartBitmap
    void onMeasure(int,int) -> onMeasure
    void onLayout(boolean,int,int,int,int) -> onLayout
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    android.view.View getChartView() -> getChartView
    int[] $SWITCH_TABLE$com$github$mikephil$charting$utils$Legend$LegendPosition() -> H
com.github.mikephil.charting.charts.Chart$DefaultValueFormatter -> com.a.a.a.a.f:
    java.text.DecimalFormat mFormat -> b
    com.github.mikephil.charting.charts.Chart this$0 -> a
    java.lang.String getFormattedValue(float) -> a
com.github.mikephil.charting.charts.LineChart -> com.a.a.a.a.g:
    float mHighlightWidth -> a
    android.graphics.Paint mCirclePaintInner -> b
    com.github.mikephil.charting.utils.FillFormatter mFillFormatter -> c
    void init() -> a
    void calcMinMax(boolean) -> a
    void drawHighlights() -> b
    void drawData() -> c
    void drawCubic(com.github.mikephil.charting.data.LineDataSet,java.util.ArrayList) -> a
    void drawCubicFill(com.github.mikephil.charting.data.LineDataSet,java.util.ArrayList,android.graphics.Path) -> a
    void drawLinear(com.github.mikephil.charting.data.LineDataSet,java.util.ArrayList) -> b
    void drawLinearFill(com.github.mikephil.charting.data.LineDataSet,java.util.ArrayList) -> c
    android.graphics.Path generateFilledPath(java.util.ArrayList,float) -> a
    android.graphics.Path generateLinePath(java.util.ArrayList) -> a
    void drawValues() -> e
    void drawAdditional() -> f
    void setHighlightLineWidth(float) -> setHighlightLineWidth
    float getHighlightLineWidth() -> getHighlightLineWidth
    void setFillFormatter(com.github.mikephil.charting.utils.FillFormatter) -> setFillFormatter
com.github.mikephil.charting.charts.LineChart$CPoint -> com.a.a.a.a.h:
    float x -> a
    float y -> b
    float dx -> c
    float dy -> d
    com.github.mikephil.charting.charts.LineChart this$0 -> e
com.github.mikephil.charting.charts.LineChart$DefaultFillFormatter -> com.a.a.a.a.i:
    com.github.mikephil.charting.charts.LineChart this$0 -> a
    float getFillLinePosition(com.github.mikephil.charting.data.LineDataSet,com.github.mikephil.charting.data.LineData,float,float) -> a
com.github.mikephil.charting.charts.PieRadarChartBase -> com.a.a.a.a.j:
    float mRotationAngle -> a
    boolean mRotateEnabled -> b
    android.view.View$OnTouchListener mListener -> c
    float mStartAngle -> d
    void init() -> a
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void prepare() -> g
    void calculateOffsets() -> i
    void drawAdditional() -> f
    void applyCalculatedOffsets() -> d
    void setStartAngle(float,float) -> a
    void updateRotation(float,float) -> b
    float getAngleForPoint(float,float) -> c
    android.graphics.PointF getPosition(android.graphics.PointF,float,float) -> a
    float distanceToCenter(float,float) -> d
    int getIndexForAngle(float) -> a
    void setRotationAngle(float) -> setRotationAngle
    float getRotationAngle() -> getRotationAngle
    void setRotationEnabled(boolean) -> setRotationEnabled
    boolean isRotationEnabled() -> h
    float getDiameter() -> getDiameter
    float getRadius() -> getRadius
    float getRequiredBottomOffset() -> getRequiredBottomOffset
    float getRequiredBaseOffset() -> getRequiredBaseOffset
    float getFullLegendWidth() -> getFullLegendWidth
    void setOnTouchListener(android.view.View$OnTouchListener) -> setOnTouchListener
com.github.mikephil.charting.charts.RadarChart -> com.a.a.a.a.k:
    android.graphics.Paint mWebPaint -> b
    float mWebLineWidth -> c
    float mInnerWebLineWidth -> d
    int mWebColor -> e
    int mWebColorInner -> f
    int mWebAlpha -> g
    boolean mDrawYLabels -> h
    boolean mDrawXLabels -> i
    boolean mDrawWeb -> j
    com.github.mikephil.charting.utils.YLabels mYLabels -> k
    com.github.mikephil.charting.utils.XLabels mXLabels -> l
    void init() -> a
    void calcMinMax(boolean) -> a
    void prepare() -> g
    void onDraw(android.graphics.Canvas) -> onDraw
    void drawWeb() -> j
    void drawData() -> c
    void drawLimitLines() -> k
    void prepareYLabels() -> l
    void drawYLabels() -> m
    void prepareXLabels() -> n
    void drawXLabels() -> o
    void drawValues() -> e
    void drawHighlights() -> b
    float getFactor() -> getFactor
    float getSliceAngle() -> getSliceAngle
    int getIndexForAngle(float) -> a
    com.github.mikephil.charting.utils.YLabels getYLabels() -> getYLabels
    com.github.mikephil.charting.utils.XLabels getXLabels() -> getXLabels
    void setWebLineWidth(float) -> setWebLineWidth
    void setWebLineWidthInner(float) -> setWebLineWidthInner
    void setWebAlpha(int) -> setWebAlpha
    void setWebColor(int) -> setWebColor
    void setWebColorInner(int) -> setWebColorInner
    void setDrawWeb(boolean) -> setDrawWeb
    void setDrawYLabels(boolean) -> setDrawYLabels
    void setDrawXLabels(boolean) -> setDrawXLabels
    float getRequiredBottomOffset() -> getRequiredBottomOffset
    float getRequiredBaseOffset() -> getRequiredBaseOffset
    float getRadius() -> getRadius
com.github.mikephil.charting.data.BarData -> com.a.a.a.b.a:
    float mGroupSpace -> e
    float getGroupSpace() -> a
com.github.mikephil.charting.data.BarDataSet -> com.a.a.a.b.b:
    float mBarSpace -> f
    int mStackSize -> g
    int mBarShadowColor -> h
    int mHighLightAlpha -> i
    java.lang.String[] mStackLabels -> j
    int getStackSize() -> a_
    float getBarSpace() -> b
    int getBarShadowColor() -> c
    int getHighLightAlpha() -> d
    java.lang.String[] getStackLabels() -> e
com.github.mikephil.charting.data.BarEntry -> com.a.a.a.b.c:
    float[] mVals -> a
    float[] getVals() -> b_
com.github.mikephil.charting.data.BarLineScatterCandleData -> com.a.a.a.b.d:
com.github.mikephil.charting.data.BarLineScatterCandleRadarData -> com.a.a.a.b.e:
    java.util.ArrayList mLimitLines -> e
    java.util.ArrayList getLimitLines() -> b
com.github.mikephil.charting.data.BarLineScatterCandleRadarDataSet -> com.a.a.a.b.f:
    int mHighLightColor -> a
    void setHighLightColor(int) -> a
    int getHighLightColor() -> f
com.github.mikephil.charting.data.CandleData -> com.a.a.a.b.g:
com.github.mikephil.charting.data.CandleDataSet -> com.a.a.a.b.h:
    float mShadowWidth -> f
    float mBodySpace -> g
    void calcMinMax() -> a
    float getBodySpace() -> b
    float getShadowWidth() -> c
com.github.mikephil.charting.data.CandleEntry -> com.a.a.a.b.i:
    float mShadowHigh -> a
    float mShadowLow -> b
    float mClose -> c
    float mOpen -> d
    float getVal() -> a
    float getHigh() -> b
    float getLow() -> c
    float getClose() -> d
    float getOpen() -> e
com.github.mikephil.charting.data.ChartData -> com.a.a.a.b.j:
    float mYMax -> a
    float mYMin -> b
    float mYValueSum -> e
    int mYValCount -> f
    float mXValAverageLength -> g
    java.util.ArrayList mXVals -> c
    java.util.ArrayList mDataSets -> d
    java.util.ArrayList arrayToArrayList(java.lang.String[]) -> a
    void init() -> a
    void calcXValAverageLength() -> b
    void isLegal(java.util.ArrayList) -> d
    void calcMinMax(java.util.ArrayList) -> a
    void calcYValueSum(java.util.ArrayList) -> b
    void calcYValueCount(java.util.ArrayList) -> c
    int getDataSetCount() -> c
    float getYMin() -> d
    float getYMax() -> e
    float getXValAverageLength() -> f
    float getYValueSum() -> g
    int getYValCount() -> h
    java.util.ArrayList getXVals() -> i
    java.util.ArrayList getDataSets() -> j
    int getXValCount() -> k
    com.github.mikephil.charting.data.DataSet getDataSetByIndex(int) -> a
    void addDataSet(com.github.mikephil.charting.data.DataSet) -> a
    boolean removeDataSet(com.github.mikephil.charting.data.DataSet) -> b
    com.github.mikephil.charting.data.DataSet getDataSetForEntry(com.github.mikephil.charting.data.Entry) -> a
com.github.mikephil.charting.data.DataSet -> com.a.a.a.b.k:
    java.util.ArrayList mColors -> b
    java.util.ArrayList mYVals -> c
    float mYMax -> d
    float mYMin -> e
    float mYValueSum -> a
    java.lang.String mLabel -> f
    void calcMinMax() -> a
    void calcYValueSum() -> b
    int getEntryCount() -> g
    float getYValForXIndex(int) -> b
    com.github.mikephil.charting.data.Entry getEntryForXIndex(int) -> c
    java.util.ArrayList getYVals() -> h
    float getYValueSum() -> i
    float getYMin() -> j
    float getYMax() -> k
    java.lang.String toString() -> toString
    java.lang.String toSimpleString() -> l
    java.lang.String getLabel() -> m
    void setColor(int) -> d
    java.util.ArrayList getColors() -> n
    int getColor(int) -> e
    int getColor() -> o
    void resetColors() -> p
    int getEntryPosition(com.github.mikephil.charting.data.Entry) -> a
com.github.mikephil.charting.data.Entry -> com.a.a.a.b.l:
    float mVal -> a
    int mXIndex -> b
    java.lang.Object mData -> c
    int getXIndex() -> f
    float getVal() -> a
    boolean equalTo(com.github.mikephil.charting.data.Entry) -> a
    java.lang.String toString() -> toString
com.github.mikephil.charting.data.LineData -> com.a.a.a.b.m:
com.github.mikephil.charting.data.LineDataSet -> com.a.a.a.b.n:
    java.util.ArrayList mCircleColors -> f
    float mCircleSize -> g
    float mCubicIntensity -> h
    android.graphics.DashPathEffect mDashPathEffect -> i
    boolean mDrawCircles -> j
    boolean mDrawCubic -> k
    float getCubicIntensity() -> b
    void setCircleSize(float) -> a
    float getCircleSize() -> c
    android.graphics.DashPathEffect getDashPathEffect() -> d
    boolean isDrawCirclesEnabled() -> e
    void setDrawCubic(boolean) -> a
    boolean isDrawCubicEnabled() -> q
    int getCircleColor(int) -> f
    void setCircleColor(int) -> g
    void resetCircleColors() -> r
com.github.mikephil.charting.data.LineRadarDataSet -> com.a.a.a.b.o:
    int mFillColor -> f
    int mFillAlpha -> g
    float mLineWidth -> h
    boolean mDrawFilled -> i
    int getFillColor() -> s
    int getFillAlpha() -> t
    void setLineWidth(float) -> b
    float getLineWidth() -> u
    boolean isDrawFilledEnabled() -> v
com.github.mikephil.charting.data.PieDataSet -> com.a.a.a.b.p:
com.github.mikephil.charting.data.RadarData -> com.a.a.a.b.q:
com.github.mikephil.charting.data.RadarDataSet -> com.a.a.a.b.r:
com.github.mikephil.charting.interfaces.ChartInterface -> com.a.a.a.c.a:
    float getOffsetBottom() -> getOffsetBottom
    float getOffsetTop() -> getOffsetTop
    float getOffsetLeft() -> getOffsetLeft
    float getOffsetRight() -> getOffsetRight
    float getDeltaX() -> getDeltaX
    float getDeltaY() -> getDeltaY
    float getYChartMin() -> getYChartMin
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    android.graphics.RectF getContentRect() -> getContentRect
    android.view.View getChartView() -> getChartView
com.github.mikephil.charting.interfaces.OnChartGestureListener -> com.a.a.a.c.b:
    void onChartLongPressed(android.view.MotionEvent) -> a
    void onChartDoubleTapped(android.view.MotionEvent) -> b
    void onChartSingleTapped(android.view.MotionEvent) -> c
    void onChartFling(android.view.MotionEvent,android.view.MotionEvent,float,float) -> a
com.github.mikephil.charting.interfaces.OnChartValueSelectedListener -> com.a.a.a.c.c:
    void onValueSelected(com.github.mikephil.charting.data.Entry,int) -> a
    void onNothingSelected() -> a
com.github.mikephil.charting.interfaces.OnDrawListener -> com.a.a.a.c.d:
com.github.mikephil.charting.listener.BarLineChartTouchListener -> com.a.a.a.d.a:
    android.graphics.Matrix mMatrix -> a
    android.graphics.Matrix mSavedMatrix -> b
    android.graphics.PointF mTouchStartPoint -> c
    android.graphics.PointF mTouchPointCenter -> d
    int mTouchMode -> e
    float mSavedXDist -> f
    float mSavedYDist -> g
    float mSavedDist -> h
    com.github.mikephil.charting.utils.Highlight mLastHighlighted -> i
    com.github.mikephil.charting.charts.BarLineChartBase mChart -> j
    android.view.GestureDetector mGestureDetector -> k
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
    void saveTouchStart(android.view.MotionEvent) -> a
    void performDrag(android.view.MotionEvent) -> b
    void performZoom(android.view.MotionEvent) -> c
    float distance(float,float,float,float) -> a
    void midPoint(android.graphics.PointF,android.view.MotionEvent) -> a
    float spacing(android.view.MotionEvent) -> d
    float getXDist(android.view.MotionEvent) -> e
    float getYDist(android.view.MotionEvent) -> f
    android.graphics.PointF getTrans(float,float) -> a
    boolean onDoubleTap(android.view.MotionEvent) -> onDoubleTap
    void onLongPress(android.view.MotionEvent) -> onLongPress
    boolean onSingleTapUp(android.view.MotionEvent) -> onSingleTapUp
    boolean onSingleTapConfirmed(android.view.MotionEvent) -> onSingleTapConfirmed
    boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onFling
com.github.mikephil.charting.listener.PieRadarChartTouchListener -> com.a.a.a.d.b:
    android.graphics.PointF mTouchStartPoint -> a
    com.github.mikephil.charting.charts.PieRadarChartBase mChart -> b
    int mTouchMode -> c
    android.view.GestureDetector mGestureDetector -> d
    com.github.mikephil.charting.utils.Highlight mLastHighlight -> e
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
    void onLongPress(android.view.MotionEvent) -> onLongPress
    boolean onSingleTapConfirmed(android.view.MotionEvent) -> onSingleTapConfirmed
    boolean onSingleTapUp(android.view.MotionEvent) -> onSingleTapUp
    boolean onDoubleTap(android.view.MotionEvent) -> onDoubleTap
    float distance(float,float,float,float) -> a
com.github.mikephil.charting.renderer.Transformer -> com.a.a.a.e.a:
    android.graphics.Matrix mMatrixValueToPx -> a
    android.graphics.Matrix mMatrixOffset -> b
    android.graphics.Matrix mMatrixTouch -> c
    boolean mInvertYAxis -> d
    float mMinScaleY -> e
    float mMinScaleX -> f
    float mScaleX -> g
    float mScaleY -> h
    float mTransOffsetX -> i
    float mTransOffsetY -> j
    void prepareMatrixValuePx(com.github.mikephil.charting.interfaces.ChartInterface) -> a
    void prepareMatrixOffset(com.github.mikephil.charting.interfaces.ChartInterface) -> b
    float[] generateTransformedValuesLineScatter(java.util.ArrayList,float) -> a
    float[] generateTransformedValuesBarChart(java.util.ArrayList,int,com.github.mikephil.charting.data.BarData,float) -> a
    void pathValueToPixel(android.graphics.Path) -> a
    void pointValuesToPixel(float[]) -> a
    void rectValueToPixel(android.graphics.RectF,float) -> a
    void pixelsToValue(float[]) -> b
    android.graphics.Matrix zoom(float,float,float,float) -> a
    android.graphics.Matrix fitScreen() -> a
    void setInvertYAxisEnabled(boolean) -> a
    boolean isInvertYAxisEnabled() -> b
    android.graphics.Matrix refresh(android.graphics.Matrix,com.github.mikephil.charting.interfaces.ChartInterface) -> a
    void limitTransAndScale(android.graphics.Matrix,android.graphics.RectF) -> a
    android.graphics.Matrix getTouchMatrix() -> c
    android.graphics.Matrix getValueMatrix() -> d
    android.graphics.Matrix getOffsetMatrix() -> e
    float getScaleX() -> f
    float getScaleY() -> g
    boolean isFullyZoomedOut() -> h
    boolean isFullyZoomedOutY() -> i
    boolean isFullyZoomedOutX() -> j
    void setDragOffsetX(float) -> a
    void setDragOffsetY(float) -> b
    boolean hasNoDragOffset() -> k
com.github.mikephil.charting.utils.FillFormatter -> com.a.a.a.f.a:
    float getFillLinePosition(com.github.mikephil.charting.data.LineDataSet,com.github.mikephil.charting.data.LineData,float,float) -> a
com.github.mikephil.charting.utils.Highlight -> com.a.a.a.f.b:
    int mXIndex -> a
    int mDataSetIndex -> b
    int getDataSetIndex() -> a
    int getXIndex() -> b
    boolean equalTo(com.github.mikephil.charting.utils.Highlight) -> a
com.github.mikephil.charting.utils.LabelBase -> com.a.a.a.f.c:
    android.graphics.Typeface mTypeface -> a
    float mTextSize -> b
    int mTextColor -> c
    void setTextSize(float) -> a
    float getTextSize() -> a
    void setTypeface(android.graphics.Typeface) -> a
    android.graphics.Typeface getTypeface() -> b
    void setTextColor(int) -> a
    int getTextColor() -> c
com.github.mikephil.charting.utils.Legend -> com.a.a.a.f.d:
    float mLegendOffsetBottom -> a
    float mLegendOffsetRight -> b
    float mLegendOffsetLeft -> c
    float mLegendOffsetTop -> d
    int[] mColors -> e
    java.lang.String[] mLegendLabels -> f
    com.github.mikephil.charting.utils.Legend$LegendPosition mPosition -> g
    com.github.mikephil.charting.utils.Legend$LegendForm mShape -> h
    android.graphics.Typeface mTypeface -> i
    float mTextSize -> j
    int mTextColor -> k
    float mFormSize -> l
    float mXEntrySpace -> m
    float mYEntrySpace -> n
    float mFormToTextSpace -> o
    float mStackSpace -> p
    int[] $SWITCH_TABLE$com$github$mikephil$charting$utils$Legend$LegendForm -> q
    int getMaximumEntryLength(android.graphics.Paint) -> a
    int[] getColors() -> a
    java.lang.String[] getLegendLabels() -> b
    com.github.mikephil.charting.utils.Legend$LegendPosition getPosition() -> c
    com.github.mikephil.charting.utils.Legend$LegendForm getForm() -> d
    void setForm(com.github.mikephil.charting.utils.Legend$LegendForm) -> a
    android.graphics.Typeface getTypeface() -> e
    void setTypeface(android.graphics.Typeface) -> a
    void setFormSize(float) -> a
    float getFormSize() -> f
    float getXEntrySpace() -> g
    float getYEntrySpace() -> h
    float getFormToTextSpace() -> i
    void drawForm(android.graphics.Canvas,float,float,android.graphics.Paint,int) -> a
    void drawLabel(android.graphics.Canvas,float,float,android.graphics.Paint,int) -> b
    void apply(com.github.mikephil.charting.utils.Legend) -> a
    float getOffsetBottom() -> j
    void setOffsetBottom(float) -> b
    void setOffsetRight(float) -> c
    float getOffsetTop() -> k
    float getOffsetLeft() -> l
    void setOffsetTop(float) -> d
    void setOffsetLeft(float) -> e
    float getTextSize() -> m
    float getStackSpace() -> n
    float getFullWidth(android.graphics.Paint) -> b
    float getFullHeight(android.graphics.Paint) -> c
    void setTextColor(int) -> a
    int getTextColor() -> o
    int[] $SWITCH_TABLE$com$github$mikephil$charting$utils$Legend$LegendForm() -> p
com.github.mikephil.charting.utils.Legend$LegendForm -> com.a.a.a.f.e:
    com.github.mikephil.charting.utils.Legend$LegendForm SQUARE -> a
    com.github.mikephil.charting.utils.Legend$LegendForm CIRCLE -> b
    com.github.mikephil.charting.utils.Legend$LegendForm LINE -> c
    com.github.mikephil.charting.utils.Legend$LegendForm[] ENUM$VALUES -> d
    com.github.mikephil.charting.utils.Legend$LegendForm[] values() -> values
    com.github.mikephil.charting.utils.Legend$LegendForm valueOf(java.lang.String) -> valueOf
com.github.mikephil.charting.utils.Legend$LegendPosition -> com.a.a.a.f.f:
    com.github.mikephil.charting.utils.Legend$LegendPosition RIGHT_OF_CHART -> a
    com.github.mikephil.charting.utils.Legend$LegendPosition RIGHT_OF_CHART_CENTER -> b
    com.github.mikephil.charting.utils.Legend$LegendPosition RIGHT_OF_CHART_INSIDE -> c
    com.github.mikephil.charting.utils.Legend$LegendPosition BELOW_CHART_LEFT -> d
    com.github.mikephil.charting.utils.Legend$LegendPosition BELOW_CHART_RIGHT -> e
    com.github.mikephil.charting.utils.Legend$LegendPosition BELOW_CHART_CENTER -> f
    com.github.mikephil.charting.utils.Legend$LegendPosition PIECHART_CENTER -> g
    com.github.mikephil.charting.utils.Legend$LegendPosition NONE -> h
    com.github.mikephil.charting.utils.Legend$LegendPosition[] ENUM$VALUES -> i
    com.github.mikephil.charting.utils.Legend$LegendPosition[] values() -> values
    com.github.mikephil.charting.utils.Legend$LegendPosition valueOf(java.lang.String) -> valueOf
com.github.mikephil.charting.utils.LimitLine -> com.a.a.a.f.g:
    float mLimit -> a
    float mLineWidth -> b
    int mLineColor -> c
    boolean mDrawValue -> d
    android.graphics.DashPathEffect mDashPathEffect -> e
    com.github.mikephil.charting.utils.LimitLine$LimitLabelPosition mLabelPosition -> f
    float getLimit() -> a
    float getLineWidth() -> b
    int getLineColor() -> c
    android.graphics.DashPathEffect getDashPathEffect() -> d
    boolean isDrawValueEnabled() -> e
    com.github.mikephil.charting.utils.LimitLine$LimitLabelPosition getLabelPosition() -> f
com.github.mikephil.charting.utils.LimitLine$LimitLabelPosition -> com.a.a.a.f.h:
    com.github.mikephil.charting.utils.LimitLine$LimitLabelPosition LEFT -> a
    com.github.mikephil.charting.utils.LimitLine$LimitLabelPosition RIGHT -> b
    com.github.mikephil.charting.utils.LimitLine$LimitLabelPosition[] ENUM$VALUES -> c
    com.github.mikephil.charting.utils.LimitLine$LimitLabelPosition[] values() -> values
    com.github.mikephil.charting.utils.LimitLine$LimitLabelPosition valueOf(java.lang.String) -> valueOf
com.github.mikephil.charting.utils.MarkerView -> com.a.a.a.f.i:
    float mXOffset -> a
    float mYOffset -> b
    void setupLayoutResource(int) -> setupLayoutResource
    void draw(android.graphics.Canvas,float,float) -> a
    void refreshContent(com.github.mikephil.charting.data.Entry,int) -> a
    float getXOffset() -> getXOffset
    float getYOffset() -> getYOffset
com.github.mikephil.charting.utils.PointD -> com.a.a.a.f.j:
    double x -> a
    double y -> b
    java.lang.String toString() -> toString
com.github.mikephil.charting.utils.SelInfo -> com.a.a.a.f.k:
    float val -> a
    int dataSetIndex -> b
com.github.mikephil.charting.utils.Utils -> com.a.a.a.f.l:
    android.util.DisplayMetrics mMetrics -> a
    int[] POW_10 -> b
    void init(android.content.res.Resources) -> a
    float convertDpToPixel(float) -> a
    int calcTextWidth(android.graphics.Paint,java.lang.String) -> a
    int calcTextHeight(android.graphics.Paint,java.lang.String) -> b
    java.lang.String formatNumber(float,int,boolean) -> a
    float roundToNextSignificant(double) -> a
    int getDecimals(float) -> b
    int[] convertIntegers(java.util.ArrayList) -> a
    java.lang.String[] convertStrings(java.util.ArrayList) -> b
    double nextUp(double) -> b
    int getClosestDataSetIndex(java.util.ArrayList,float) -> a
com.github.mikephil.charting.utils.ValueFormatter -> com.a.a.a.f.m:
    java.lang.String getFormattedValue(float) -> a
com.github.mikephil.charting.utils.XLabels -> com.a.a.a.f.n:
    int mLabelWidth -> a
    int mLabelHeight -> b
    int mSpaceBetweenLabels -> f
    int mXAxisLabelModulus -> c
    int mYAxisLabelModulus -> d
    boolean mCenterXAxisLabels -> g
    boolean mAvoidFirstLastClipping -> h
    boolean mAdjustXAxisLabels -> e
    com.github.mikephil.charting.utils.XLabels$XLabelPosition mPosition -> i
    boolean isCenterXLabelsEnabled() -> d
    void setCenterXLabelText(boolean) -> a
    void setAdjustXLabels(boolean) -> b
    boolean isAdjustXLabelsEnabled() -> e
    com.github.mikephil.charting.utils.XLabels$XLabelPosition getPosition() -> f
    void setPosition(com.github.mikephil.charting.utils.XLabels$XLabelPosition) -> a
    int getSpaceBetweenLabels() -> g
    void setAvoidFirstLastClipping(boolean) -> c
    boolean isAvoidFirstLastClippingEnabled() -> h
com.github.mikephil.charting.utils.XLabels$XLabelPosition -> com.a.a.a.f.o:
    com.github.mikephil.charting.utils.XLabels$XLabelPosition TOP -> a
    com.github.mikephil.charting.utils.XLabels$XLabelPosition BOTTOM -> b
    com.github.mikephil.charting.utils.XLabels$XLabelPosition BOTH_SIDED -> c
    com.github.mikephil.charting.utils.XLabels$XLabelPosition TOP_INSIDE -> d
    com.github.mikephil.charting.utils.XLabels$XLabelPosition BOTTOM_INSIDE -> e
    com.github.mikephil.charting.utils.XLabels$XLabelPosition[] ENUM$VALUES -> f
    com.github.mikephil.charting.utils.XLabels$XLabelPosition[] values() -> values
    com.github.mikephil.charting.utils.XLabels$XLabelPosition valueOf(java.lang.String) -> valueOf
com.github.mikephil.charting.utils.YLabels -> com.a.a.a.f.p:
    float[] mEntries -> a
    int mEntryCount -> b
    int mDecimals -> c
    int mLabelCount -> f
    boolean mDrawUnitsInLabels -> g
    boolean mDrawTopYLabelEntry -> h
    boolean mSeparateTousands -> d
    boolean mShowOnlyMinMax -> e
    com.github.mikephil.charting.utils.ValueFormatter mFormatter -> i
    com.github.mikephil.charting.utils.YLabels$YLabelPosition mPosition -> j
    com.github.mikephil.charting.utils.YLabels$YLabelPosition getPosition() -> d
    boolean isDrawUnitsInYLabelEnabled() -> e
    void setDrawUnitsInYLabel(boolean) -> a
    boolean isDrawTopYLabelEntryEnabled() -> f
    void setLabelCount(int) -> b
    int getLabelCount() -> g
    boolean isSeparateThousandsEnabled() -> h
    com.github.mikephil.charting.utils.ValueFormatter getFormatter() -> i
    boolean isShowOnlyMinMaxEnabled() -> j
    java.lang.String getLongestLabel() -> k
    java.lang.String getFormattedLabel(int) -> c
com.github.mikephil.charting.utils.YLabels$YLabelPosition -> com.a.a.a.f.q:
    com.github.mikephil.charting.utils.YLabels$YLabelPosition LEFT -> a
    com.github.mikephil.charting.utils.YLabels$YLabelPosition RIGHT -> b
    com.github.mikephil.charting.utils.YLabels$YLabelPosition BOTH_SIDED -> c
    com.github.mikephil.charting.utils.YLabels$YLabelPosition LEFT_INSIDE -> d
    com.github.mikephil.charting.utils.YLabels$YLabelPosition RIGHT_INSIDE -> e
    com.github.mikephil.charting.utils.YLabels$YLabelPosition[] ENUM$VALUES -> f
    com.github.mikephil.charting.utils.YLabels$YLabelPosition[] values() -> values
    com.github.mikephil.charting.utils.YLabels$YLabelPosition valueOf(java.lang.String) -> valueOf
com.wawa.arm.ARMActivity -> com.wawa.arm.ARMActivity:
    java.lang.String TAG -> p
    android.widget.ImageView openImg -> q
    android.widget.ImageView settingImg -> r
    android.widget.ImageView volsettingImg -> s
    android.widget.ImageView openclose -> t
    android.bluetooth.BluetoothAdapter mBluetoothAdapter -> u
    com.wawa.arm.service.BluetoothChatService mChatService -> v
    java.lang.String mConnectedDeviceName -> w
    boolean isStopflag -> x
    boolean isSearching -> y
    com.wawa.arm.net.WaitUIElement dialog -> z
    com.wawa.arm.utile.widgets.SearchDevicesView scan -> A
    java.util.Timer timer -> B
    long lastUpDataTime -> C
    long cmdResultTime -> D
    int stopCount -> n
    com.wawa.arm.common.SoundPoolPlay play -> E
    com.wawa.arm.utile.LineChartUtil mChart -> F
    int currentStatu -> G
    android.os.Handler handler -> H
    android.os.Handler mHandler -> I
    int fistVal -> J
    boolean can -> K
    android.content.BroadcastReceiver mReceiver -> L
    boolean isBack -> M
    boolean needOpenChooice -> N
    android.speech.tts.TextToSpeech myTTS -> O
    com.wawa.arm.utile.widgets.OMDialog closeDialog -> P
    android.app.Notification notification -> Q
    android.app.NotificationManager nManager -> R
    android.app.PendingIntent pendingIntent -> S
    int lastVal -> T
    void onCreate(android.os.Bundle) -> onCreate
    void initStatutButton(boolean) -> b
    void changeButtonStatu(int,java.lang.Object[]) -> a
    void connect(java.lang.String) -> c
    void setupChat() -> g
    void startARM() -> h
    void stopARM() -> i
    void readMsg(byte[]) -> a
    void sendMessage(byte[]) -> b
    void onStart() -> onStart
    void onResume() -> onResume
    void onPause() -> onPause
    void onDestroy() -> onDestroy
    void onUserInteraction() -> onUserInteraction
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void notification(int) -> a
    void disnotifcation() -> j
    void access$0(com.wawa.arm.ARMActivity) -> a
    void access$1(com.wawa.arm.ARMActivity) -> b
    java.lang.String access$2() -> e
    com.wawa.arm.net.WaitUIElement access$3(com.wawa.arm.ARMActivity) -> c
    void access$4(com.wawa.arm.ARMActivity,boolean) -> a
    com.wawa.arm.service.BluetoothChatService access$5(com.wawa.arm.ARMActivity) -> d
    void access$6(com.wawa.arm.ARMActivity,int,java.lang.Object[]) -> a
    void access$7(com.wawa.arm.ARMActivity,boolean) -> b
    void access$8(com.wawa.arm.ARMActivity,int) -> a
    void access$9(com.wawa.arm.ARMActivity,byte[]) -> a
    void access$10(com.wawa.arm.ARMActivity,java.lang.String) -> a
    boolean access$11(com.wawa.arm.ARMActivity) -> e
    boolean access$12(com.wawa.arm.ARMActivity) -> f
    void access$13(com.wawa.arm.ARMActivity,boolean) -> c
    boolean access$14(com.wawa.arm.ARMActivity) -> g
    int access$15(com.wawa.arm.ARMActivity) -> h
    boolean access$16(com.wawa.arm.ARMActivity) -> i
    android.os.Handler access$17(com.wawa.arm.ARMActivity) -> j
    com.wawa.arm.common.SoundPoolPlay access$18(com.wawa.arm.ARMActivity) -> k
    android.widget.ImageView access$19(com.wawa.arm.ARMActivity) -> l
    void access$20(com.wawa.arm.ARMActivity,boolean) -> d
    void access$21(com.wawa.arm.ARMActivity,java.lang.String) -> b
    long access$22(com.wawa.arm.ARMActivity) -> m
    android.widget.ImageView access$23(com.wawa.arm.ARMActivity) -> n
    void access$24(com.wawa.arm.ARMActivity,boolean) -> e
    com.wawa.arm.utile.LineChartUtil access$25(com.wawa.arm.ARMActivity) -> o
    android.widget.ImageView access$26(com.wawa.arm.ARMActivity) -> p
    long access$27(com.wawa.arm.ARMActivity) -> q
    java.util.Timer access$28(com.wawa.arm.ARMActivity) -> r
    void access$29(com.wawa.arm.ARMActivity,java.util.Timer) -> a
    void access$30(com.wawa.arm.ARMActivity,long) -> a
    android.speech.tts.TextToSpeech access$31(com.wawa.arm.ARMActivity) -> s
    com.wawa.arm.utile.widgets.OMDialog access$32(com.wawa.arm.ARMActivity) -> t
com.wawa.arm.ARMActivity$1 -> com.wawa.arm.a:
    com.wawa.arm.ARMActivity this$0 -> a
    boolean handleMessage(android.os.Message) -> handleMessage
com.wawa.arm.ARMActivity$10 -> com.wawa.arm.b:
    com.wawa.arm.ARMActivity this$0 -> a
    java.lang.Object[] val$vals -> b
    void onClick(android.view.View) -> onClick
com.wawa.arm.ARMActivity$11 -> com.wawa.arm.c:
    com.wawa.arm.ARMActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.wawa.arm.ARMActivity$12 -> com.wawa.arm.d:
    com.wawa.arm.ARMActivity this$0 -> a
    void run() -> run
com.wawa.arm.ARMActivity$13 -> com.wawa.arm.e:
    com.wawa.arm.ARMActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.wawa.arm.ARMActivity$14 -> com.wawa.arm.f:
    com.wawa.arm.ARMActivity this$0 -> a
    void run() -> run
com.wawa.arm.ARMActivity$15 -> com.wawa.arm.g:
    com.wawa.arm.ARMActivity this$0 -> a
    void onCancel(android.content.DialogInterface) -> onCancel
com.wawa.arm.ARMActivity$16 -> com.wawa.arm.h:
    com.wawa.arm.ARMActivity this$0 -> a
    byte[] val$cmd -> b
    void run() -> run
com.wawa.arm.ARMActivity$17 -> com.wawa.arm.i:
    com.wawa.arm.ARMActivity this$0 -> a
    void onInit(int) -> onInit
com.wawa.arm.ARMActivity$18 -> com.wawa.arm.j:
    com.wawa.arm.ARMActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.wawa.arm.ARMActivity$2 -> com.wawa.arm.k:
    com.wawa.arm.ARMActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
    com.wawa.arm.ARMActivity access$0(com.wawa.arm.ARMActivity$2) -> a
com.wawa.arm.ARMActivity$2$1 -> com.wawa.arm.l:
    com.wawa.arm.ARMActivity$2 this$1 -> a
    void onCancel(android.content.DialogInterface) -> onCancel
com.wawa.arm.ARMActivity$3 -> com.wawa.arm.m:
    com.wawa.arm.ARMActivity this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.wawa.arm.ARMActivity$4 -> com.wawa.arm.n:
    com.wawa.arm.ARMActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.wawa.arm.ARMActivity$5 -> com.wawa.arm.o:
    com.wawa.arm.ARMActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.wawa.arm.ARMActivity$6 -> com.wawa.arm.p:
    com.wawa.arm.ARMActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.wawa.arm.ARMActivity$7 -> com.wawa.arm.q:
    com.wawa.arm.ARMActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.wawa.arm.ARMActivity$8 -> com.wawa.arm.r:
    com.wawa.arm.ARMActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.wawa.arm.ARMActivity$9 -> com.wawa.arm.s:
    com.wawa.arm.ARMActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.wawa.arm.AboutActivity -> com.wawa.arm.AboutActivity:
    android.widget.TextView sn -> n
    android.widget.TextView appver -> p
    android.widget.TextView name -> q
    android.widget.TextView mac -> r
    android.widget.TextView armver -> s
    android.widget.TextView armno -> t
    void onCreate(android.os.Bundle) -> onCreate
    void initData() -> e
com.wawa.arm.DeviceListActivity -> com.wawa.arm.DeviceListActivity:
    java.lang.String EXTRA_DEVICE_ADDRESS -> a
    android.bluetooth.BluetoothAdapter mBtAdapter -> b
    com.wawa.arm.adapter.DeivceListAdapter mPairedDevicesArrayAdapter -> c
    com.wawa.arm.adapter.DeivceListAdapter mNewDevicesArrayAdapter -> d
    com.wawa.arm.net.WaitUIElement dialog -> e
    java.util.List nopairs -> f
    java.util.List pairs -> g
    java.util.Set set -> h
    android.widget.AdapterView$OnItemClickListener mDeviceClickListener -> i
    android.content.BroadcastReceiver mReceiver -> j
    void onCreate(android.os.Bundle) -> onCreate
    void onDestroy() -> onDestroy
    void doDiscovery() -> a
    void result(java.lang.String) -> c
    void linkDeivce(java.lang.String) -> a
    void clearDeivce(java.lang.String) -> b
    android.bluetooth.BluetoothAdapter access$0(com.wawa.arm.DeviceListActivity) -> a
    java.util.Set access$1(com.wawa.arm.DeviceListActivity) -> b
    java.util.List access$2(com.wawa.arm.DeviceListActivity) -> c
    com.wawa.arm.adapter.DeivceListAdapter access$3(com.wawa.arm.DeviceListActivity) -> d
    com.wawa.arm.net.WaitUIElement access$4(com.wawa.arm.DeviceListActivity) -> e
    void access$5(com.wawa.arm.DeviceListActivity,java.lang.String) -> a
    void access$6(com.wawa.arm.DeviceListActivity) -> f
com.wawa.arm.DeviceListActivity$1 -> com.wawa.arm.t:
    com.wawa.arm.DeviceListActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.wawa.arm.DeviceListActivity$2 -> com.wawa.arm.u:
    com.wawa.arm.DeviceListActivity this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.wawa.arm.DeviceListActivity$3 -> com.wawa.arm.v:
    com.wawa.arm.DeviceListActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.wawa.arm.R -> com.wawa.arm.w:
com.wawa.arm.R$styleable -> com.wawa.arm.x:
    int[] CirclePageIndicator -> CirclePageIndicator
    int CirclePageIndicator_android_background -> CirclePageIndicator_android_background
    int CirclePageIndicator_android_orientation -> CirclePageIndicator_android_orientation
    int CirclePageIndicator_centered -> CirclePageIndicator_centered
    int CirclePageIndicator_fillColor -> CirclePageIndicator_fillColor
    int CirclePageIndicator_pageColor -> CirclePageIndicator_pageColor
    int CirclePageIndicator_radius -> CirclePageIndicator_radius
    int CirclePageIndicator_snap -> CirclePageIndicator_snap
    int CirclePageIndicator_strokeColor -> CirclePageIndicator_strokeColor
    int CirclePageIndicator_strokeWidth -> CirclePageIndicator_strokeWidth
    int[] LinePageIndicator -> LinePageIndicator
    int LinePageIndicator_android_background -> LinePageIndicator_android_background
    int LinePageIndicator_centered -> LinePageIndicator_centered
    int LinePageIndicator_gapWidth -> LinePageIndicator_gapWidth
    int LinePageIndicator_lineWidth -> LinePageIndicator_lineWidth
    int LinePageIndicator_selectedColor -> LinePageIndicator_selectedColor
    int LinePageIndicator_strokeWidth -> LinePageIndicator_strokeWidth
    int LinePageIndicator_unselectedColor -> LinePageIndicator_unselectedColor
    int[] PullToRefresh -> PullToRefresh
    int PullToRefresh_adapterViewBackground -> PullToRefresh_adapterViewBackground
    int PullToRefresh_headerBackground -> PullToRefresh_headerBackground
    int PullToRefresh_headerTextColor -> PullToRefresh_headerTextColor
    int PullToRefresh_pullMode -> PullToRefresh_pullMode
    int[] RippleView -> RippleView
    int RippleView_rv_alpha -> RippleView_rv_alpha
    int RippleView_rv_centered -> RippleView_rv_centered
    int RippleView_rv_color -> RippleView_rv_color
    int RippleView_rv_framerate -> RippleView_rv_framerate
    int RippleView_rv_rippleDuration -> RippleView_rv_rippleDuration
    int RippleView_rv_ripplePadding -> RippleView_rv_ripplePadding
    int RippleView_rv_type -> RippleView_rv_type
    int RippleView_rv_zoom -> RippleView_rv_zoom
    int RippleView_rv_zoomDuration -> RippleView_rv_zoomDuration
    int RippleView_rv_zoomScale -> RippleView_rv_zoomScale
    int[] TitlePageIndicator -> TitlePageIndicator
    int TitlePageIndicator_android_background -> TitlePageIndicator_android_background
    int TitlePageIndicator_android_textColor -> TitlePageIndicator_android_textColor
    int TitlePageIndicator_android_textSize -> TitlePageIndicator_android_textSize
    int TitlePageIndicator_clipPadding -> TitlePageIndicator_clipPadding
    int TitlePageIndicator_footerColor -> TitlePageIndicator_footerColor
    int TitlePageIndicator_footerIndicatorHeight -> TitlePageIndicator_footerIndicatorHeight
    int TitlePageIndicator_footerIndicatorStyle -> TitlePageIndicator_footerIndicatorStyle
    int TitlePageIndicator_footerIndicatorUnderlinePadding -> TitlePageIndicator_footerIndicatorUnderlinePadding
    int TitlePageIndicator_footerLineHeight -> TitlePageIndicator_footerLineHeight
    int TitlePageIndicator_footerPadding -> TitlePageIndicator_footerPadding
    int TitlePageIndicator_linePosition -> TitlePageIndicator_linePosition
    int TitlePageIndicator_selectedBold -> TitlePageIndicator_selectedBold
    int TitlePageIndicator_selectedColor -> TitlePageIndicator_selectedColor
    int TitlePageIndicator_titlePadding -> TitlePageIndicator_titlePadding
    int TitlePageIndicator_topPadding -> TitlePageIndicator_topPadding
    int[] UnderlinePageIndicator -> UnderlinePageIndicator
    int UnderlinePageIndicator_android_background -> UnderlinePageIndicator_android_background
    int UnderlinePageIndicator_fadeDelay -> UnderlinePageIndicator_fadeDelay
    int UnderlinePageIndicator_fadeLength -> UnderlinePageIndicator_fadeLength
    int UnderlinePageIndicator_fades -> UnderlinePageIndicator_fades
    int UnderlinePageIndicator_selectedColor -> UnderlinePageIndicator_selectedColor
    int[] ViewPagerIndicator -> ViewPagerIndicator
    int ViewPagerIndicator_vpiCirclePageIndicatorStyle -> ViewPagerIndicator_vpiCirclePageIndicatorStyle
    int ViewPagerIndicator_vpiIconPageIndicatorStyle -> ViewPagerIndicator_vpiIconPageIndicatorStyle
    int ViewPagerIndicator_vpiLinePageIndicatorStyle -> ViewPagerIndicator_vpiLinePageIndicatorStyle
    int ViewPagerIndicator_vpiTabPageIndicatorStyle -> ViewPagerIndicator_vpiTabPageIndicatorStyle
    int ViewPagerIndicator_vpiTitlePageIndicatorStyle -> ViewPagerIndicator_vpiTitlePageIndicatorStyle
    int ViewPagerIndicator_vpiUnderlinePageIndicatorStyle -> ViewPagerIndicator_vpiUnderlinePageIndicatorStyle
com.wawa.arm.SettingActivity -> com.wawa.arm.SettingActivity:
    android.widget.TextView about -> n
    android.widget.Button save -> p
    com.wawa.arm.utile.widgets.OMEditText armpl -> q
    com.wawa.arm.utile.widgets.OMEditText armrm -> r
    com.wawa.arm.utile.widgets.OMEditText armsx -> s
    com.wawa.arm.utile.widgets.OMEditText armzq -> t
    com.wawa.arm.utile.widgets.OMEditText appcs -> u
    com.wawa.arm.utile.widgets.OMEditText armpairname -> v
    com.wawa.arm.utile.widgets.OMEditText armpairkey -> w
    android.widget.LinearLayout volChooseArea -> x
    long time -> y
    int count -> z
    java.lang.String isOpen -> A
    java.lang.String currentChoose -> B
    void onCreate(android.os.Bundle) -> onCreate
    void radioBtn() -> e
    boolean isOkVal(java.lang.String,java.lang.String) -> a
    int access$0(com.wawa.arm.SettingActivity) -> a
    void access$1(com.wawa.arm.SettingActivity,long) -> a
    long access$2(com.wawa.arm.SettingActivity) -> b
    void access$3(com.wawa.arm.SettingActivity,int) -> a
    com.wawa.arm.utile.widgets.OMEditText access$4(com.wawa.arm.SettingActivity) -> c
    com.wawa.arm.utile.widgets.OMEditText access$5(com.wawa.arm.SettingActivity) -> d
    com.wawa.arm.utile.widgets.OMEditText access$6(com.wawa.arm.SettingActivity) -> e
    com.wawa.arm.utile.widgets.OMEditText access$7(com.wawa.arm.SettingActivity) -> f
    com.wawa.arm.utile.widgets.OMEditText access$8(com.wawa.arm.SettingActivity) -> g
    com.wawa.arm.utile.widgets.OMEditText access$9(com.wawa.arm.SettingActivity) -> h
    com.wawa.arm.utile.widgets.OMEditText access$10(com.wawa.arm.SettingActivity) -> i
    java.lang.String access$11(com.wawa.arm.SettingActivity) -> j
    java.lang.String access$12(com.wawa.arm.SettingActivity) -> k
    void access$13(com.wawa.arm.SettingActivity,java.lang.String) -> a
    void access$14(com.wawa.arm.SettingActivity,java.lang.String) -> b
com.wawa.arm.SettingActivity$1 -> com.wawa.arm.y:
    com.wawa.arm.SettingActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.wawa.arm.SettingActivity$2 -> com.wawa.arm.z:
    com.wawa.arm.SettingActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.wawa.arm.SettingActivity$3 -> com.wawa.arm.aa:
    com.wawa.arm.SettingActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.wawa.arm.SettingActivity$4 -> com.wawa.arm.ab:
    com.wawa.arm.SettingActivity this$0 -> a
    void OnChanged(com.wawa.arm.utile.widgets.WiperSwitchView,boolean) -> a
com.wawa.arm.SettingActivity$5 -> com.wawa.arm.ac:
    com.wawa.arm.SettingActivity this$0 -> a
    android.widget.RadioButton val$low -> b
    android.widget.RadioButton val$mid -> c
    android.widget.RadioButton val$high -> d
    void onCheckedChanged(android.widget.RadioGroup,int) -> onCheckedChanged
com.wawa.arm.StartActivity -> com.wawa.arm.StartActivity:
    android.widget.ImageView screenImage -> a
    android.view.animation.Animation animation -> b
    void onCreate(android.os.Bundle) -> onCreate
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
com.wawa.arm.StartActivity$1 -> com.wawa.arm.ad:
    com.wawa.arm.StartActivity this$0 -> a
    void onAnimationStart(android.view.animation.Animation) -> onAnimationStart
    void onAnimationRepeat(android.view.animation.Animation) -> onAnimationRepeat
    void onAnimationEnd(android.view.animation.Animation) -> onAnimationEnd
com.wawa.arm.adapter.DeivceListAdapter -> com.wawa.arm.a.a:
    com.wawa.arm.DeviceListActivity context -> a
    java.util.List mItems -> b
    int type -> c
    int getCount() -> getCount
    java.lang.String getItem(int) -> a
    long getItemId(int) -> getItemId
    int getItemViewType(int) -> getItemViewType
    int getViewTypeCount() -> getViewTypeCount
    boolean isEnabled(int) -> isEnabled
    boolean areAllItemsEnabled() -> areAllItemsEnabled
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    java.lang.Object getItem(int) -> getItem
    com.wawa.arm.DeviceListActivity access$1(com.wawa.arm.adapter.DeivceListAdapter) -> a
com.wawa.arm.adapter.DeivceListAdapter$1 -> com.wawa.arm.a.b:
    com.wawa.arm.adapter.DeivceListAdapter this$0 -> a
    java.lang.String val$item -> b
    void onClick(android.view.View) -> onClick
com.wawa.arm.adapter.DeivceListAdapter$2 -> com.wawa.arm.a.c:
    com.wawa.arm.adapter.DeivceListAdapter this$0 -> a
    java.lang.String val$item -> b
    void onClick(android.view.View) -> onClick
com.wawa.arm.adapter.DeivceListAdapter$ViewHolder -> com.wawa.arm.a.d:
    android.widget.TextView nameaddr -> a
    android.widget.Button clear -> b
    android.widget.Button link -> c
    com.wawa.arm.adapter.DeivceListAdapter this$0 -> d
com.wawa.arm.common.AppManager -> com.wawa.arm.common.a:
    java.util.Stack activityStack -> a
    com.wawa.arm.common.AppManager instance -> b
    com.wawa.arm.common.AppManager getAppManager() -> a
    void addActivity(android.app.Activity) -> a
    android.app.Activity currentActivity() -> b
    void finishActivity(android.app.Activity) -> b
    void finishAllActivity() -> c
    void AppExit(android.content.Context) -> a
com.wawa.arm.common.BaseActivity -> com.wawa.arm.common.b:
    boolean allowFullScreen -> n
    boolean allowDestroy -> p
    android.widget.TextView title -> q
    android.widget.ImageView logo -> r
    android.widget.LinearLayout layoutFirst -> s
    android.view.View view -> t
    com.wawa.arm.net.WaitUIElement dialog -> u
    android.os.Handler coomonHandler -> o
    void onCreate(android.os.Bundle) -> onCreate
    void onCreate(android.os.Bundle,boolean) -> a
    void setContentView(int) -> setContentView
    void setContentView(int,boolean) -> a
    void setTitle(java.lang.String) -> b
    int getTitleVal() -> f
    void showBackBtn(boolean,android.view.View$OnClickListener) -> a
    void onDestroy() -> onDestroy
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void access$0(com.wawa.arm.common.BaseActivity,com.wawa.arm.net.WaitUIElement) -> a
    com.wawa.arm.net.WaitUIElement access$1(com.wawa.arm.common.BaseActivity) -> a
com.wawa.arm.common.BaseActivity$1 -> com.wawa.arm.common.c:
    com.wawa.arm.common.BaseActivity this$0 -> a
    boolean handleMessage(android.os.Message) -> handleMessage
com.wawa.arm.common.BaseActivity$2 -> com.wawa.arm.common.d:
    com.wawa.arm.common.BaseActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.wawa.arm.common.CommonMethod -> com.wawa.arm.common.e:
    boolean checkDeviceName(java.lang.String) -> a
com.wawa.arm.common.OMApplication -> com.wawa.arm.common.OMApplication:
    java.lang.String TAG -> p
    com.wawa.arm.common.OMApplication omApp -> q
    android.content.SharedPreferences sharePrefer -> r
    android.content.SharedPreferences$Editor sharePreferEd -> s
    java.util.Map configs -> t
    java.util.Map cacheVal -> u
    java.lang.String NET_STATUS_ERROR -> a
    java.lang.String TYPE_NETWORK_NOT_CONNECT -> b
    java.lang.String TYPE_NETWORK_CONNECT_TIMEOUT -> c
    java.lang.String TYPE_NETWORK_SOCKET_TIMEOUT -> d
    java.lang.String TYPE_NETWORK_IO_EXCEPTION -> e
    java.lang.String APP_ERROR -> f
    java.lang.String TYPE_NETWORK_OPER_SUCCESS -> g
    java.lang.String TYPE_NETWORK_OPER_FAILE -> h
    java.lang.String TYPE_NETWORK_DIGEST_ERROR -> i
    java.lang.String LOGIN_TIP_001 -> j
    java.lang.String LOGIN_TIP_002 -> k
    java.lang.String BALANCE_TIP_001 -> l
    java.lang.String BALANCE_TIP_002 -> m
    java.lang.String STATEMENT_TIP_002 -> n
    java.lang.String LOGOUT_TIP_001 -> o
    java.lang.Thread logthread -> v
    com.wawa.arm.common.OMApplication getInstance() -> a
    void onCreate() -> onCreate
    void onTerminate() -> onTerminate
    android.content.pm.PackageInfo getPackageInfo() -> b
    void initPropertiesFromFile(android.content.Context) -> a
    void setValToSharePrefer(java.lang.String,java.lang.String) -> a
    void setVal(java.lang.String,java.lang.Object,boolean) -> a
    java.lang.Object getVal(java.lang.String,java.lang.Object) -> a
    void logoutClearCacheData() -> c
com.wawa.arm.common.SoundPoolPlay -> com.wawa.arm.common.f:
    boolean isOpen -> a
    android.media.SoundPool mSoundPool -> b
    java.util.HashMap mSoundPoolMap -> c
    android.media.AudioManager mAudioManager -> d
    int currentVol -> e
    int alarmId -> f
    int nomerId -> g
    int lastLevl -> h
    long lastTime -> i
    java.util.Timer timer -> j
    android.speech.tts.TextToSpeech myTTS -> k
    void setOpen(boolean) -> a
    void changeSystemAlarmVol(int) -> a
    int getCurrentVol() -> c
    void play(int) -> b
    void stopAll() -> a
    void destory() -> b
    void setTTS(android.speech.tts.TextToSpeech) -> a
    android.speech.tts.TextToSpeech access$0(com.wawa.arm.common.SoundPoolPlay) -> a
    int access$1(com.wawa.arm.common.SoundPoolPlay) -> b
    boolean access$2(com.wawa.arm.common.SoundPoolPlay) -> c
com.wawa.arm.common.SoundPoolPlay$1 -> com.wawa.arm.common.g:
    com.wawa.arm.common.SoundPoolPlay this$0 -> a
    void run() -> run
com.wawa.arm.net.WaitUIElement -> com.wawa.arm.b.a:
    boolean needUI -> a
    android.content.Context context -> b
    com.wawa.arm.utile.widgets.OMNetDialog progressDialog -> c
    boolean needDialog -> d
    void showToast(java.lang.String,boolean) -> a
    void showProcessDialog(java.lang.String) -> a
    boolean changeMag(java.lang.String) -> b
    void dismissProcessDialog() -> a
    void setCancelLis(android.content.DialogInterface$OnCancelListener) -> a
com.wawa.arm.service.BluetoothChatService -> com.wawa.arm.c.a:
    java.util.UUID MY_UUID -> a
    android.bluetooth.BluetoothAdapter mAdapter -> b
    android.os.Handler mHandler -> c
    com.wawa.arm.service.BluetoothChatService$AcceptThread mAcceptThread -> d
    com.wawa.arm.service.BluetoothChatService$ConnectThread mConnectThread -> e
    com.wawa.arm.service.BluetoothChatService$ConnectedThread mConnectedThread -> f
    int mState -> g
    void setState(int) -> a
    int getState() -> a
    void connect(android.bluetooth.BluetoothDevice) -> a
    void connected(android.bluetooth.BluetoothSocket,android.bluetooth.BluetoothDevice) -> a
    void stop() -> b
    void write(byte[]) -> a
    void connectionFailed() -> d
    void connectionLost() -> e
    void sendMsgError() -> f
    android.bluetooth.BluetoothAdapter access$0(com.wawa.arm.service.BluetoothChatService) -> a
    java.util.UUID access$1() -> c
    int access$2(com.wawa.arm.service.BluetoothChatService) -> b
    void access$3(com.wawa.arm.service.BluetoothChatService) -> c
    void access$4(com.wawa.arm.service.BluetoothChatService,com.wawa.arm.service.BluetoothChatService$ConnectThread) -> a
    android.os.Handler access$5(com.wawa.arm.service.BluetoothChatService) -> d
    void access$6(com.wawa.arm.service.BluetoothChatService) -> e
    void access$7(com.wawa.arm.service.BluetoothChatService) -> f
com.wawa.arm.service.BluetoothChatService$AcceptThread -> com.wawa.arm.c.b:
    android.bluetooth.BluetoothServerSocket mmServerSocket -> b
    com.wawa.arm.service.BluetoothChatService this$0 -> a
    void run() -> run
    void cancel() -> a
com.wawa.arm.service.BluetoothChatService$ConnectThread -> com.wawa.arm.c.c:
    android.bluetooth.BluetoothSocket mmSocket -> b
    android.bluetooth.BluetoothDevice mmDevice -> c
    com.wawa.arm.service.BluetoothChatService this$0 -> a
    void run() -> run
    void cancel() -> a
com.wawa.arm.service.BluetoothChatService$ConnectedThread -> com.wawa.arm.c.d:
    android.bluetooth.BluetoothSocket mmSocket -> b
    java.io.InputStream mmInStream -> c
    java.io.OutputStream mmOutStream -> d
    com.wawa.arm.service.BluetoothChatService this$0 -> a
    void run() -> run
    void write(byte[]) -> a
    void cancel() -> a
com.wawa.arm.utile.AppException -> com.wawa.arm.utile.a:
    java.lang.Thread$UncaughtExceptionHandler mDefaultHandler -> a
    com.wawa.arm.utile.AppException getAppExceptionHandler() -> a
    void uncaughtException(java.lang.Thread,java.lang.Throwable) -> uncaughtException
    boolean handleException(java.lang.Throwable) -> a
    java.lang.String getCrashReport(android.content.Context,java.lang.Throwable) -> a
    void sendAppCrashReport(android.content.Context,java.lang.String) -> a
com.wawa.arm.utile.AppException$1 -> com.wawa.arm.utile.b:
    com.wawa.arm.utile.AppException this$0 -> a
    android.content.Context val$context -> b
    java.lang.String val$crashReport -> c
    void run() -> run
com.wawa.arm.utile.AppException$2 -> com.wawa.arm.utile.c:
    com.wawa.arm.utile.widgets.OMDialog val$dialog -> a
    java.lang.String val$crashReport -> b
    android.content.Context val$cont -> c
    void onClick(android.view.View) -> onClick
com.wawa.arm.utile.AppException$3 -> com.wawa.arm.utile.d:
    com.wawa.arm.utile.widgets.OMDialog val$dialog -> a
    android.content.Context val$cont -> b
    void onClick(android.view.View) -> onClick
com.wawa.arm.utile.LineChartUtil -> com.wawa.arm.utile.e:
    com.wawa.arm.utile.widgets.MyLineChart linechart -> a
    com.wawa.arm.common.BaseActivity context -> b
    android.graphics.Typeface mTf -> c
    int GRIDCOLOR -> d
    android.os.Handler handler -> e
    java.util.List addData -> f
    long lastAddDataTime -> g
    java.util.Timer timer -> h
    void init() -> a
    com.github.mikephil.charting.data.LineDataSet createSet(java.util.ArrayList,java.lang.String) -> a
    void addEntry(int) -> a
    void changeView() -> b
    void addDataSet(java.util.List) -> a
    void removeDataSet(boolean) -> a
    void addEmptyData() -> c
    void setupChart(com.github.mikephil.charting.charts.LineChart,com.github.mikephil.charting.data.LineData) -> a
    void access$0(com.wawa.arm.utile.LineChartUtil) -> a
    android.os.Handler access$1(com.wawa.arm.utile.LineChartUtil) -> b
com.wawa.arm.utile.LineChartUtil$1 -> com.wawa.arm.utile.f:
    com.wawa.arm.utile.LineChartUtil this$0 -> a
    boolean handleMessage(android.os.Message) -> handleMessage
com.wawa.arm.utile.LineChartUtil$2 -> com.wawa.arm.utile.g:
    com.wawa.arm.utile.LineChartUtil this$0 -> a
    void onValueSelected(com.github.mikephil.charting.data.Entry,int) -> a
    void onNothingSelected() -> a
com.wawa.arm.utile.LineChartUtil$3 -> com.wawa.arm.utile.h:
    com.wawa.arm.utile.LineChartUtil this$0 -> a
    void run() -> run
com.wawa.arm.utile.MobileUtils -> com.wawa.arm.utile.i:
    java.lang.String[] getTelInfo() -> a
    java.lang.String getAppVersionName(android.content.Context) -> a
com.wawa.arm.utile.MyToast -> com.wawa.arm.utile.j:
    android.widget.Toast mToast -> a
    android.os.Handler mHandler -> b
    java.lang.Runnable r -> c
    android.widget.Toast diyToast -> d
    android.os.Handler diyHandler -> e
    java.lang.Runnable diy -> f
    void showToast(android.content.Context,java.lang.String,int) -> a
    void showDIYToast(android.app.Activity,java.lang.String,int,boolean) -> a
    android.widget.Toast access$0() -> a
    android.widget.Toast access$1() -> b
com.wawa.arm.utile.MyToast$1 -> com.wawa.arm.utile.k:
    void run() -> run
com.wawa.arm.utile.MyToast$2 -> com.wawa.arm.utile.l:
    void run() -> run
com.wawa.arm.utile.TransferUtil -> com.wawa.arm.utile.m:
    byte[] int2bytes(int) -> a
    java.lang.String byte2HexStr(byte[]) -> a
com.wawa.arm.utile.log.LogThread -> com.wawa.arm.utile.a.a:
    boolean isPrintLog -> a
    int maxfilelength -> b
    void run() -> run
com.wawa.arm.utile.log.LogUtil -> com.wawa.arm.utile.a.b:
    java.lang.String LOG_TAG -> a
    java.lang.String[] getCallerClassNameAndMethodName() -> a
    void d(java.lang.String) -> a
    void i(java.lang.String) -> b
    void e(java.lang.Throwable) -> a
    void e(java.lang.String,java.lang.Throwable) -> a
    void d(java.lang.String,java.lang.String) -> a
    void i(java.lang.String,java.lang.String) -> b
    void e(java.lang.String,java.lang.String,java.lang.Throwable) -> a
com.wawa.arm.utile.widgets.BaseView -> com.wawa.arm.utile.widgets.a:
    android.content.Context context -> a
    void onDraw(android.graphics.Canvas) -> onDraw
com.wawa.arm.utile.widgets.MyLineChart -> com.wawa.arm.utile.widgets.MyLineChart:
    float mHighlightWidth -> c
    android.graphics.Paint mCirclePaintInner -> ap
    com.github.mikephil.charting.utils.FillFormatter mFillFormatter -> aq
    void init() -> a
    void calcMinMax(boolean) -> a
    void drawHighlights() -> b
    void drawData() -> c
    void drawCubic(com.github.mikephil.charting.data.LineDataSet,java.util.ArrayList) -> a
    void drawCubicFill(com.github.mikephil.charting.data.LineDataSet,java.util.ArrayList,android.graphics.Path) -> a
    void drawLinear(com.github.mikephil.charting.data.LineDataSet,java.util.ArrayList) -> b
    void drawLinearFill(com.github.mikephil.charting.data.LineDataSet,java.util.ArrayList) -> c
    android.graphics.Path generateFilledPath(java.util.ArrayList,float) -> a
    android.graphics.Path generateLinePath(java.util.ArrayList) -> a
    void drawValues() -> e
    void drawAdditional() -> f
    void setHighlightLineWidth(float) -> setHighlightLineWidth
    float getHighlightLineWidth() -> getHighlightLineWidth
    void setFillFormatter(com.github.mikephil.charting.utils.FillFormatter) -> setFillFormatter
    boolean access$0(com.wawa.arm.utile.widgets.MyLineChart) -> a
com.wawa.arm.utile.widgets.MyLineChart$CPoint -> com.wawa.arm.utile.widgets.b:
    float x -> a
    float y -> b
    float dx -> c
    float dy -> d
    com.wawa.arm.utile.widgets.MyLineChart this$0 -> e
com.wawa.arm.utile.widgets.MyLineChart$DefaultFillFormatter -> com.wawa.arm.utile.widgets.c:
    com.wawa.arm.utile.widgets.MyLineChart this$0 -> a
    float getFillLinePosition(com.github.mikephil.charting.data.LineDataSet,com.github.mikephil.charting.data.LineData,float,float) -> a
com.wawa.arm.utile.widgets.OMDialog -> com.wawa.arm.utile.widgets.d:
    com.wawa.arm.utile.widgets.OMDialog dialog -> a
    int currentMode -> b
    com.wawa.arm.utile.widgets.OMDialog createDialog(android.content.Context) -> a
    com.wawa.arm.utile.widgets.OMDialog setTitile(java.lang.String) -> a
    com.wawa.arm.utile.widgets.OMDialog setContent(android.text.Spanned) -> a
    com.wawa.arm.utile.widgets.OMDialog setBtnOkClickListener(android.view.View$OnClickListener) -> a
    com.wawa.arm.utile.widgets.OMDialog setBtnCancelClickListener(android.view.View$OnClickListener) -> b
    com.wawa.arm.utile.widgets.OMDialog access$0() -> a
    void access$1(com.wawa.arm.utile.widgets.OMDialog) -> a
com.wawa.arm.utile.widgets.OMDialog$1 -> com.wawa.arm.utile.widgets.e:
    void onClick(android.view.View) -> onClick
com.wawa.arm.utile.widgets.OMEditText -> com.wawa.arm.utile.widgets.OMEditText:
    android.graphics.drawable.Drawable imgAble -> a
    android.content.Context mContext -> b
    void init() -> a
    void setDrawable() -> b
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void access$0(com.wawa.arm.utile.widgets.OMEditText) -> a
com.wawa.arm.utile.widgets.OMEditText$1 -> com.wawa.arm.utile.widgets.f:
    com.wawa.arm.utile.widgets.OMEditText this$0 -> a
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
    void afterTextChanged(android.text.Editable) -> afterTextChanged
com.wawa.arm.utile.widgets.OMNetDialog -> com.wawa.arm.utile.widgets.g:
    com.wawa.arm.utile.widgets.OMNetDialog dialog -> a
    com.wawa.arm.utile.widgets.OMNetDialog createDialog(android.content.Context,int,java.lang.String) -> a
    com.wawa.arm.utile.widgets.OMNetDialog setContent(java.lang.String) -> a
    void dismiss() -> dismiss
com.wawa.arm.utile.widgets.RippleView -> com.wawa.arm.utile.widgets.RippleView:
    int WIDTH -> a
    int HEIGHT -> b
    int FRAME_RATE -> c
    int DURATION -> d
    int PAINT_ALPHA -> e
    android.os.Handler canvasHandler -> f
    float radiusMax -> g
    boolean animationRunning -> h
    int timer -> i
    int timerEmpty -> j
    int durationEmpty -> k
    float x -> l
    float y -> m
    int zoomDuration -> n
    float zoomScale -> o
    android.view.animation.ScaleAnimation scaleAnimation -> p
    java.lang.Boolean hasToZoom -> q
    java.lang.Boolean isCentered -> r
    java.lang.Integer rippleType -> s
    android.graphics.Paint paint -> t
    android.graphics.Bitmap originBitmap -> u
    int rippleColor -> v
    android.view.View childView -> w
    int ripplePadding -> x
    android.view.GestureDetector gestureDetector -> y
    java.lang.Runnable runnable -> z
    void init(android.content.Context,android.util.AttributeSet) -> a
    void addView(android.view.View,int,android.view.ViewGroup$LayoutParams) -> addView
    void draw(android.graphics.Canvas) -> draw
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    android.graphics.Bitmap getCircleBitmap(int) -> a
com.wawa.arm.utile.widgets.RippleView$1 -> com.wawa.arm.utile.widgets.h:
    com.wawa.arm.utile.widgets.RippleView this$0 -> a
    void run() -> run
com.wawa.arm.utile.widgets.RippleView$2 -> com.wawa.arm.utile.widgets.i:
    com.wawa.arm.utile.widgets.RippleView this$0 -> a
    boolean onSingleTapConfirmed(android.view.MotionEvent) -> onSingleTapConfirmed
    boolean onSingleTapUp(android.view.MotionEvent) -> onSingleTapUp
com.wawa.arm.utile.widgets.SearchDevicesView -> com.wawa.arm.utile.widgets.SearchDevicesView:
    long TIME_DIFF -> g
    int[] lineColor -> b
    int[] innerCircle0 -> c
    int[] innerCircle1 -> d
    int[] innerCircle2 -> e
    int[] argColor -> f
    float offsetArgs -> h
    boolean isSearching -> i
    android.graphics.Bitmap bitmap -> j
    android.graphics.Bitmap bitmap1 -> k
    android.graphics.Bitmap bitmap2 -> l
    android.graphics.Bitmap currentBitmap -> m
    int LEVLE -> n
    android.os.Handler handler -> o
    boolean isSearching() -> a
    void initBitmap() -> b
    void onDraw(android.graphics.Canvas) -> onDraw
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void handleActionDownEvenet(android.view.MotionEvent) -> a
    void setHandler(android.os.Handler) -> setHandler
com.wawa.arm.utile.widgets.WiperSwitchView -> com.wawa.arm.utile.widgets.WiperSwitchView:
    android.graphics.Bitmap bg_on -> a
    android.graphics.Bitmap bg_off -> b
    android.graphics.Bitmap slipper_btn -> c
    float downX -> d
    float nowX -> e
    boolean onSlip -> f
    boolean nowStatus -> g
    com.wawa.arm.utile.widgets.WiperSwitchView$OnChangedListener listener -> h
    void init(android.content.Context) -> a
    void onDraw(android.graphics.Canvas) -> onDraw
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
    void setOnChangedListener(com.wawa.arm.utile.widgets.WiperSwitchView$OnChangedListener) -> setOnChangedListener
    void setChecked(boolean) -> setChecked
com.wawa.arm.utile.widgets.WiperSwitchView$OnChangedListener -> com.wawa.arm.utile.widgets.j:
    void OnChanged(com.wawa.arm.utile.widgets.WiperSwitchView,boolean) -> a
